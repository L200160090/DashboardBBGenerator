/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.text.NumberFormat;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFChart;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JFileChooser;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.util.*;
import org.apache.poi.xddf.usermodel.chart.ChartTypes;
import org.apache.poi.xddf.usermodel.chart.LegendPosition;
import org.apache.poi.xddf.usermodel.chart.XDDFChartData;
import org.apache.poi.xddf.usermodel.chart.XDDFChartLegend;
import org.apache.poi.xddf.usermodel.chart.XDDFDataSource;
import org.apache.poi.xddf.usermodel.chart.XDDFDataSourcesFactory;
import org.apache.poi.xddf.usermodel.chart.XDDFNumericalDataSource;

/**
 *
 * @author dimas
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        totalAgen = new javax.swing.JLabel();
        tanggalData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Program Pembuat Dasboard");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(848, 484));

        jButton2.setText("Select File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Import Template");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTabbedPane1.setMinimumSize(getMinimumSize());
        jTabbedPane1.setPreferredSize(getPreferredSize());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Agen", "Cabang Kuadran", "Nama Cabang", "Nama Agen", "No Rekening Agen", "Nama PIC SRBB", "Nama MKS", "Balance Agen", "Average Agen", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran", "Balance Agen", "Average Agen", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Data Masuk", jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Cabang", "Cluster", "Pimpinan", "Cabang", "MKS", "Agen", "Saldo Agen", "Sales Volume", "Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "Ratas MKS / Agen", "A1", "B1", "C1", "D1", "E1", "A2", "B2", "C2", "D2", "E2"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Database Cabang", jScrollPane2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cluster", "Pimpinan", "Cabang", "MKS", "Agen", "Saldo Agen", "Sales Volume", "Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "Ratas MKS/Agen", "A1", "B1", "C1", "D1", "E1", "A2", "B2", "C2", "D2", "E2"
            }
        ));
        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable3.setAutoscrolls(false);
        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Database Cluster", jScrollPane3);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama SRBB", "Jumlah Agen/MKS", "Saldo Agen", "Sales Volume", "Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "A1", "B1", "C1", "D1", "E1", "A2", "B2", "C2", "D2", "E2"
            }
        ));
        jTable4.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(jTable4);

        jTabbedPane1.addTab("Database SRBB", jScrollPane4);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama SRBB", "Jumlah Agen/MKS", "Saldo Agen", "Sales Volume", "Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "A1", "B1", "C1", "D1", "E1", "A2", "B2", "C2", "D2", "E2"
            }
        ));
        jTable8.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane9.setViewportView(jTable8);

        jTabbedPane1.addTab("Database Sales", jScrollPane9);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Agen", "Cabang Kuadran", "Nama Cabang", "Nama Agen", "No Rekening Agen", "Nama PIC SRBB", "Nama MKS", "Balance Agen", "Average Agen", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran", "Balance Agen", "Average Agenl", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran"
            }
        ));
        jTable5.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane5.setViewportView(jTable5);

        jTabbedPane1.addTab("Data 1", jScrollPane5);

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Agen", "Cabang Kuadran", "Nama Cabang", "Nama Agen", "No Rekening Agen", "Nama PIC SRBB", "Nama MKS", "Balance Agen", "Average Agen", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran", "Balance Agen", "Average Agenl", "Balance Nasabah", "Funding", "Sales Volume", "Freq", "Rekening Turunan", "Referral Kredit", "Kuadran"
            }
        ));
        jTable6.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane6.setViewportView(jTable6);

        jTabbedPane1.addTab("Data 2", jScrollPane6);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Cabang", "Cluster", "Pimpinan", "Cabang", "MKS", "Agen", "Saldo Agen", "Sales Volume", "Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "Ratas MKS / Agen", "A1", "B1", "C1", "D1", "E1", "A2", "B2", "C2", "D2", "E2"
            }
        ));
        jTable7.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane7.setViewportView(jTable7);

        jTabbedPane1.addTab("Data 3", jScrollPane7);

        jButton3.setText("Export File");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        totalAgen.setText("Total Agen : 0");

        tanggalData.setText("Tanggal Datablast : 0 - 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(223, 223, 223)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(213, 213, 213)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(totalAgen)
                        .addGap(18, 18, 18)
                        .addComponent(tanggalData)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton1))
                .addGap(6, 6, 6)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tanggalData, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalAgen, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Initialize tanggalData
    String[] tanggalDatablast = new String[2];

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        fileChooser.setFileFilter(fnef);
        int returnValue = fileChooser.showOpenDialog(null);
        // Initialize Loading
        JFrame frame = new JFrame();
        ImageIcon loadGif = new ImageIcon("img/spinner.gif");
        JLabel loadingSplash = new JLabel(loadGif);
        frame.setUndecorated(true);
        frame.add(loadingSplash);
        frame.pack();
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            new Thread(() -> {
                try {
                    frame.setLocationRelativeTo(jScrollPane1);
                    frame.setVisible(true);
                    // Reset Default pas Awal
                    DefaultTableModel[] modelAsli = new DefaultTableModel[6];
                    modelAsli[0] = (DefaultTableModel) jTable1.getModel();
                    modelAsli[1] = (DefaultTableModel) jTable2.getModel();
                    modelAsli[2] = (DefaultTableModel) jTable3.getModel();
                    modelAsli[3] = (DefaultTableModel) jTable4.getModel();
                    modelAsli[4] = (DefaultTableModel) jTable5.getModel();
                    modelAsli[5] = (DefaultTableModel) jTable6.getModel();
                    for (int i = 0; i < 6; i++) {
                        modelAsli[i].setRowCount(0);
                    }
                    totalAgen.setText("Total Agen : 0");

                    OPCPackage selectedFile = OPCPackage.open(fileChooser.getSelectedFile());
                    //Create Workbook instance holding reference to .xlsx file
                    Workbook workbook = new XSSFWorkbook(selectedFile);

                    //Get first/desired sheet from the workbook
                    Sheet sheet = workbook.getSheetAt(0);
                    Sheet sheet2 = workbook.getSheetAt(1);
                    Sheet sheet3 = workbook.getSheetAt(2);

                    //Get Tanggal DataBlast
                    for (int i = 0; i <= 1; i++) {
                        Row row = sheet.getRow(i);
                        Cell cell = row.getCell(1);
                        tanggalDatablast[i] = cell.getStringCellValue();
                    }
                    tanggalData.setText("Tanggal Datablast : " + tanggalDatablast[0] + " - " + tanggalDatablast[1]);

                    //DATA UTAMA
                    for (int rowa = 3; rowa <= sheet.getLastRowNum(); rowa++) {
                        Row row = sheet.getRow(rowa);
                        Cell[] ex = new Cell[25];
                        for (int getc = 0; getc <= 24; getc++) {
                            ex[getc] = row.getCell(getc);
                        }

                        //Kode agen cabang kuadran
                        long[] format = new long[2];
                        for (int getc = 0; getc <= 1; getc++) {
                            if (ex[getc] != null) {
                                try {
                                    format[getc] = (long) ex[getc].getNumericCellValue();
                                } catch (Exception e) {
                                    format[getc] = 0;
                                }
                            } else {
                                format[getc] = 0;
                            }
                        }

                        //Nama Cabang dan Nama Agen
                        String[] format1 = new String[2];
                        for (int getc = 2; getc <= 3; getc++) {
                            if (ex[getc] != null) {
                                try {
                                    format1[getc - 2] = (String) ex[getc].getStringCellValue();
                                } catch (Exception e) {
                                    format1[getc - 2] = "#n/a";
                                }
                            } else {
                                format1[getc - 2] = "#n/a";
                            }
                        }

                        //No Rekening
                        long format11 = 0;
                        if (ex[4] != null) {
                            try {
                                format11 = (long) ex[4].getNumericCellValue();
                            } catch (Exception e) {
                                format11 = 0;
                            }
                        } else {
                            format11 = 0;
                        }

                        //Nama SRBB dan Sales
                        String[] format112 = new String[2];
                        for (int getc = 5; getc <= 6; getc++) {
                            if (ex[getc] != null) {
                                try {
                                    format112[getc - 5] = (String) ex[getc].getStringCellValue();
                                } catch (Exception e) {
                                    format112[getc - 5] = "#n/a";
                                }
                            } else {
                                format112[getc - 5] = "#n/a";
                            }
                        }

                        //Data Angka Agen Warung
                        long[] format2 = new long[8];
                        for (int getc = 0; getc <= 7; getc++) {
                            if (ex[getc + 7] != null) {
                                try {
                                    format2[getc] = (long) ex[getc + 7].getNumericCellValue();
                                } catch (Exception e) {
                                    format2[getc] = 0;
                                }
                            } else {
                                format2[getc] = 0;
                            }
                        }
                        String format18 = "";
                        if (ex[17] != null) {
                            try {
                                format18 = (String) ex[15].getStringCellValue();
                            } catch (Exception e) {
                                format18 = "0";
                            }
                        } else {
                            format18 = "0";
                        }
                        long[] format3 = new long[8];
                        for (int getc = 0; getc <= 7; getc++) {
                            if (ex[getc + 16] != null) {
                                try {
                                    format3[getc] = (long) ex[getc + 16].getNumericCellValue();
                                } catch (Exception e) {
                                    format3[getc] = 0;
                                }
                            } else {
                                format3[getc] = 0;
                            }
                        }
                        String format26 = "";
                        if (ex[24] != null) {
                            try {
                                format26 = (String) ex[24].getStringCellValue();
                            } catch (Exception e) {
                                format26 = "0";
                            }
                        } else {
                            format26 = "0";
                        }
                        String newFormat = "";
                        String newFormat2 = "";
                        try {
                            newFormat = format112[0].substring(0, 1).toUpperCase() + format112[0].substring(1).toLowerCase();
                        } catch (Exception e) {
                            newFormat = "";
                        }
                        try {
                            newFormat2 = format112[1].substring(0, 1).toUpperCase() + format112[1].substring(1).toLowerCase();
                        } catch (Exception e) {
                            newFormat2 = "";
                        }

                        modelAsli[0].addRow(new Object[]{format[0], format[1], format1[0], format1[1], format11, newFormat, newFormat2, format2[0], format2[1], format2[2], format2[3], format2[4], format2[5], format2[6], format2[7], format18, format3[0], format3[1], format3[2], format3[3], format3[4], format3[5], format3[6], format3[7], format26});
                        modelAsli[4].addRow(new Object[]{format[0], format[1], format1[0], format1[1], format11, newFormat, newFormat2, format2[0], format2[1], format2[2], format2[3], format2[4], format2[5], format2[6], format2[7], format18, format3[0], format3[1], format3[2], format3[3], format3[4], format3[5], format3[6], format3[7], format26});
                        modelAsli[5].addRow(new Object[]{format[0], format[1], format1[0], format1[1], format11, newFormat, newFormat2, format2[0], format2[1], format2[2], format2[3], format2[4], format2[5], format2[6], format2[7], format18, format3[0], format3[1], format3[2], format3[3], format3[4], format3[5], format3[6], format3[7], format26});
                    }

                    // SORTING JTABLE DATA 1 & DATA 2
                    TableRowSorter<TableModel> sortera = new TableRowSorter<TableModel>(jTable5.getModel());
                    jTable5.setRowSorter(sortera);
                    List<RowSorter.SortKey> sortKeys1 = new ArrayList<>();
                    sortKeys1.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
                    sortKeys1.add(new RowSorter.SortKey(5, SortOrder.ASCENDING));
                    sortera.setSortKeys(sortKeys1);
                    sortera.sort();
                    TableRowSorter<TableModel> sorter2 = new TableRowSorter<TableModel>(jTable6.getModel());
                    jTable6.setRowSorter(sorter2);
                    List<RowSorter.SortKey> sortKeys2 = new ArrayList<>();
                    sortKeys2.add(new RowSorter.SortKey(6, SortOrder.ASCENDING));
                    sorter2.setSortKeys(sortKeys2);
                    sorter2.sort();
                    totalAgen.setText("Total Agen : " + jTable1.getRowCount());

                    //DATA CABANG
                    int jumlahAgen = 0;
                    long jumlahTransaksi = 0;
                    long jumlahFunding = 0;
                    long jumlahSales = 0;
                    long jumlahSaldoAgen = 0;
                    long jumlahRekeningTur = 0;
                    long jumlahReferralKre = 0;
                    int jumlahKuadranA = 0;
                    int jumlahKuadranB = 0;
                    int jumlahKuadranC = 0;
                    int jumlahKuadranD = 0;
                    int jumlahKuadranE = 0;
                    int jumlahKuadranA2 = 0;
                    int jumlahKuadranB2 = 0;
                    int jumlahKuadranC2 = 0;
                    int jumlahKuadranD2 = 0;
                    int jumlahKuadranE2 = 0;
                    int ratas = 0;
                    for (int rowb = 1; rowb <= sheet2.getLastRowNum(); rowb++) {
                        Row row2 = sheet2.getRow(rowb);
                        Cell ex1 = row2.getCell(0);
                        Cell ex2 = row2.getCell(1);
                        Cell ex3 = row2.getCell(2);
                        Cell ex4 = row2.getCell(3);
                        Cell ex5 = row2.getCell(4);
                        DataFormatter formatter = new DataFormatter();
                        //Data Cabang
                        for (int rowx = 0; rowx < jTable1.getRowCount(); rowx++) {
                            long cellVal = (long) jTable1.getModel().getValueAt(rowx, 1);
                            long cellValTransaksi = (long) jTable1.getModel().getValueAt(rowx, 21);
                            long cellValFunding = (long) jTable1.getModel().getValueAt(rowx, 19);
                            long cellValSales = (long) jTable1.getModel().getValueAt(rowx, 20);
                            long cellValSaldoAgen = (long) jTable1.getModel().getValueAt(rowx, 16);
                            String cellValKuadran = (String) jTable1.getModel().getValueAt(rowx, 15);
                            String cellValKuadran2 = (String) jTable1.getModel().getValueAt(rowx, 24);
                            long cellRT = (long) jTable1.getModel().getValueAt(rowx, 22);
                            long cellRK = (long) jTable1.getModel().getValueAt(rowx, 23);
//                            String formatVal = formatter.formatCellValue(cellVal);
                            long formatVal2 = 0;
                            try {
                                formatVal2 = (long) ex1.getNumericCellValue();   
                            } catch (Exception e) {
                                formatVal2 = 0;
                            }
//                            String formatKuadran = formatter.formatCellValue(cellValKuadran);
//                            String formatKuadran2 = formatter.formatCellValue(cellValKuadran2);
                            long transaksiSekarang = 0;
                            long fundingSekarang = 0;
                            long salesSekarang = 0;
                            long saldoAgenSekarang = 0;
                            long rekeningSekarang = 0;
                            long referralSekarang = 0;
                            if (cellValTransaksi != 0 || cellValFunding != 0) {
                                transaksiSekarang = (long) cellValTransaksi;
                                fundingSekarang = (long) cellValFunding;
                                salesSekarang = (long) cellValSales;
                                saldoAgenSekarang = (long) cellValSaldoAgen;
                                rekeningSekarang = (long) cellRT;
                                referralSekarang = (long) cellRK;
                            }
                            if (cellVal == formatVal2) {
                                jumlahAgen++;
                                jumlahTransaksi += transaksiSekarang;
                                jumlahFunding += fundingSekarang;
                                jumlahSales += salesSekarang;
                                jumlahSaldoAgen += saldoAgenSekarang;
                                jumlahRekeningTur += rekeningSekarang;
                                jumlahReferralKre += referralSekarang;
                                if ("A".equals(cellValKuadran)) {
                                    jumlahKuadranA++;
                                }
                                if ("B".equals(cellValKuadran)) {
                                    jumlahKuadranB++;
                                }
                                if ("C".equals(cellValKuadran)) {
                                    jumlahKuadranC++;
                                }
                                if ("D".equals(cellValKuadran)) {
                                    jumlahKuadranD++;
                                }
                                if ("E".equals(cellValKuadran)) {
                                    jumlahKuadranE++;
                                }
                                if ("A".equals(cellValKuadran2)) {
                                    jumlahKuadranA2++;
                                }
                                if ("B".equals(cellValKuadran2)) {
                                    jumlahKuadranB2++;
                                }
                                if ("C".equals(cellValKuadran2)) {
                                    jumlahKuadranC2++;
                                }
                                if ("D".equals(cellValKuadran2)) {
                                    jumlahKuadranD2++;
                                }
                                if ("E".equals(cellValKuadran2)) {
                                    jumlahKuadranE2++;
                                }
                            } else {
//                            System.out.println(formatVal + " = " + formatVal2);
                            }
                        }
                        int format1 = (int) ex1.getNumericCellValue();
                        String format2 = formatter.formatCellValue(ex2);
                        String format3 = formatter.formatCellValue(ex3);
                        String format4 = formatter.formatCellValue(ex4);
                        int format5 = (int) ex5.getNumericCellValue();
                        if (format5 == 0) {
                            ratas = 0;
                        } else {
                            ratas = jumlahAgen / format5;
                        }
                        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                        DefaultTableModel model22 = (DefaultTableModel) jTable7.getModel();
                        model.addRow(new Object[]{format1, format2, format3, format4, format5, jumlahAgen, jumlahSaldoAgen, jumlahSales, jumlahTransaksi, jumlahFunding, jumlahRekeningTur, jumlahReferralKre, ratas, jumlahKuadranA, jumlahKuadranB, jumlahKuadranC, jumlahKuadranD, jumlahKuadranE, jumlahKuadranA2, jumlahKuadranB2, jumlahKuadranC2, jumlahKuadranD2, jumlahKuadranE2});
                        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTable2.getModel());
                        jTable2.setRowSorter(sorter);
                        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
                        sorter.setSortKeys(sortKeys);
                        sorter.sort();
                        model22.addRow(new Object[]{format1, format2, format3, format4, format5, jumlahAgen, jumlahSaldoAgen, jumlahSales, jumlahTransaksi, jumlahFunding, jumlahRekeningTur, jumlahReferralKre, ratas, jumlahKuadranA, jumlahKuadranB, jumlahKuadranC, jumlahKuadranD, jumlahKuadranE, jumlahKuadranA2, jumlahKuadranB2, jumlahKuadranC2, jumlahKuadranD2, jumlahKuadranE2});
                        TableRowSorter<TableModel> sorter22 = new TableRowSorter<TableModel>(jTable7.getModel());
                        jTable7.setRowSorter(sorter22);
                        List<RowSorter.SortKey> sortKeys22 = new ArrayList<>();
                        sortKeys22.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        sorter22.setSortKeys(sortKeys22);
                        sorter22.sort();
                        ratas = 0;
                        jumlahKuadranA = 0;
                        jumlahKuadranB = 0;
                        jumlahKuadranC = 0;
                        jumlahKuadranD = 0;
                        jumlahKuadranE = 0;
                        jumlahKuadranA2 = 0;
                        jumlahKuadranB2 = 0;
                        jumlahKuadranC2 = 0;
                        jumlahKuadranD2 = 0;
                        jumlahKuadranE2 = 0;
                        jumlahAgen = 0;
                        jumlahTransaksi = 0;
                        jumlahFunding = 0;
                        jumlahSales = 0;
                        jumlahSaldoAgen = 0;
                        jumlahRekeningTur = 0;
                        jumlahReferralKre = 0;
                    }

                    //Data CLuster
                    int jumlahCabang = 0;
                    int jumlahMKS = 0;
                    int jumlahAgen2 = 0;
                    int jumlahTrans = 0;
                    long jumlahFund = 0;
                    long jumlahSaldoAg = 0;
                    long jumlahSalesVol = 0;
                    long jumlahRTc = 0;
                    long jumlahRKc = 0;
                    int ratasc = 0;
                    for (int rowC = 1; rowC <= sheet3.getLastRowNum(); rowC++) {
                        DefaultTableModel model3 = (DefaultTableModel) jTable2.getModel();
                        Row row3 = sheet3.getRow(rowC);
                        Cell cellClu = row3.getCell(0);
                        Cell cellPim = row3.getCell(1);
                        DataFormatter formatter = new DataFormatter();
                        String formatClu = formatter.formatCellValue(cellClu);
                        String formatPim = formatter.formatCellValue(cellPim);
                        for (int rowD = 0; rowD < jTable2.getRowCount(); rowD++) {
                            if (formatClu == jTable2.getValueAt(rowD, 1)) {
                                jumlahCabang++;
                                Integer mksSekarang = Integer.valueOf(jTable2.getValueAt(rowD, 4).toString());
                                Integer agenSekarang2 = Integer.valueOf(jTable2.getValueAt(rowD, 5).toString());
                                long transSekarang = (long) jTable2.getValueAt(rowD, 8);
                                long fSekarang = (long) jTable2.getValueAt(rowD, 9);
                                long saldoAgSekarang = (long) jTable2.getValueAt(rowD, 6);
                                long salesVolSekarang = (long) jTable2.getValueAt(rowD, 7);
                                long rtSekarang = (long) jTable2.getValueAt(rowD, 10);
                                long rkSekarang = (long) jTable2.getValueAt(rowD, 11);
                                int a1 = (int) jTable2.getValueAt(rowD, 13);
                                int b1 = (int) jTable2.getValueAt(rowD, 14);
                                int c1 = (int) jTable2.getValueAt(rowD, 15);
                                int d1 = (int) jTable2.getValueAt(rowD, 16);
                                int e1 = (int) jTable2.getValueAt(rowD, 17);
                                int a2 = (int) jTable2.getValueAt(rowD, 18);
                                int b2 = (int) jTable2.getValueAt(rowD, 19);
                                int c2 = (int) jTable2.getValueAt(rowD, 20);
                                int d2 = (int) jTable2.getValueAt(rowD, 21);
                                int e2 = (int) jTable2.getValueAt(rowD, 22);
                                jumlahMKS += mksSekarang;
                                jumlahAgen2 += agenSekarang2;
                                jumlahTrans += transSekarang;
                                jumlahFund += fSekarang;
                                jumlahSaldoAg += saldoAgSekarang;
                                jumlahSalesVol += salesVolSekarang;
                                jumlahKuadranA += a1;
                                jumlahKuadranB += b1;
                                jumlahKuadranC += c1;
                                jumlahKuadranD += d1;
                                jumlahKuadranE += e1;
                                jumlahKuadranA2 += a2;
                                jumlahKuadranB2 += b2;
                                jumlahKuadranC2 += c2;
                                jumlahKuadranD2 += d2;
                                jumlahKuadranE2 += e2;
                                jumlahRTc += rtSekarang;
                                jumlahRKc += rkSekarang;
                            }
                        }
                        ratasc = jumlahAgen2 / jumlahMKS;
                        DefaultTableModel model4 = (DefaultTableModel) jTable3.getModel();
                        model4.addRow(new Object[]{formatClu, formatPim, jumlahCabang, jumlahMKS, jumlahAgen2, jumlahSaldoAg, jumlahSalesVol, jumlahTrans, jumlahFund, jumlahRTc, jumlahRKc, ratasc, jumlahKuadranA, jumlahKuadranB, jumlahKuadranC, jumlahKuadranD, jumlahKuadranE, jumlahKuadranA2, jumlahKuadranB2, jumlahKuadranC2, jumlahKuadranD2, jumlahKuadranE2});
                        ratasc = 0;
                        jumlahCabang = 0;
                        jumlahMKS = 0;
                        jumlahAgen2 = 0;
                        jumlahTrans = 0;
                        jumlahFund = 0;
                        jumlahSaldoAg = 0;
                        jumlahSalesVol = 0;
                        jumlahKuadranA = 0;
                        jumlahKuadranB = 0;
                        jumlahKuadranC = 0;
                        jumlahKuadranD = 0;
                        jumlahKuadranE = 0;
                        jumlahKuadranA2 = 0;
                        jumlahKuadranB2 = 0;
                        jumlahKuadranC2 = 0;
                        jumlahKuadranD2 = 0;
                        jumlahKuadranE2 = 0;
                    }

                    // DATA SRBB
                    ArrayList<String> namaSRBB = new ArrayList<String>();
                    ArrayList<String> namaSales = new ArrayList<String>();

                    // Mendapatkan data SRBB
                    for (int rowI = 0; rowI < jTable1.getRowCount(); rowI++) {
                        String nama = (String) jTable1.getValueAt(rowI, 5);
                        if (!namaSRBB.contains(nama) && !nama.equals("")) {
                            namaSRBB.add(nama);
                        }
                    }
                    for (int rowI = 0; rowI < jTable1.getRowCount(); rowI++) {
                        String nama = (String) jTable1.getValueAt(rowI, 6);
                        if (!namaSales.contains(nama) && !nama.equals("")) {
                            namaSales.add(nama);
                        }
                    }

                    // Menempelkan pada tabel
                    int jumlahAgenSRBB = 0;
                    long jumlahSaldoSRBB = 0;
                    long jumlahSalesSRBB = 0;
                    long jumlahTransaksiSRBB = 0;
                    long jumlahFundingSRBB = 0;
                    long jumlahRTs = 0;
                    long jumlahRKs = 0;
                    long[] jumlahKuadranSRBB = new long[11];
                    for (int row2 = 0; row2 < namaSRBB.size(); row2++) {
                        DefaultTableModel modelSRBB = (DefaultTableModel) jTable4.getModel();
                        for (int rowI = 0; rowI < jTable1.getRowCount(); rowI++) {
                            String nama = (String) jTable1.getValueAt(rowI, 5);
                            long saldo = 0;
                            long sales = 0;
                            long jumlahtrans = 0;
                            long jumlahFundS = 0;
                            long jumlahRTsr = 0;
                            long jumlahRKsr = 0;
                            if (jTable1.getValueAt(rowI, 16) != "") {
                                saldo = (long) jTable1.getValueAt(rowI, 16);
                            } else {
                                saldo = 0;
                            }
                            if (jTable1.getValueAt(rowI, 20) != "") {
                                sales = (long) jTable1.getValueAt(rowI, 20);
                            } else {
                                sales = 0;
                            }
                            if (jTable1.getValueAt(rowI, 21) != "") {
                                jumlahtrans = (long) jTable1.getValueAt(rowI, 21);
                            } else {
                                jumlahtrans = 0;
                            }
                            if (jTable1.getValueAt(rowI, 19) != "") {
                                jumlahFundS = (long) jTable1.getValueAt(rowI, 19);
                            } else {
                                jumlahFundS = 0;
                            }
                            if (jTable1.getValueAt(rowI, 22) != "") {
                                jumlahRTsr = (long) jTable1.getValueAt(rowI, 22);
                            } else {
                                jumlahRTsr = 0;
                            }
                            if (jTable1.getValueAt(rowI, 23) != "") {
                                jumlahRKsr = (long) jTable1.getValueAt(rowI, 23);
                            } else {
                                jumlahRKsr = 0;
                            }
                            if (nama.equals(namaSRBB.get(row2))) {
                                jumlahAgenSRBB++;
                                jumlahSaldoSRBB += saldo;
                                jumlahSalesSRBB += sales;
                                jumlahTransaksiSRBB += jumlahtrans;
                                jumlahFundingSRBB += jumlahFundS;
                                jumlahRTs += jumlahRTsr;
                                jumlahRKs += jumlahRKsr;

                                if (jTable1.getValueAt(rowI, 15).toString().equals("A")) {
                                    jumlahKuadranSRBB[0]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("B")) {
                                    jumlahKuadranSRBB[1]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("C")) {
                                    jumlahKuadranSRBB[2]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("D")) {
                                    jumlahKuadranSRBB[3]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("E")) {
                                    jumlahKuadranSRBB[4]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("A")) {
                                    jumlahKuadranSRBB[5]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("B")) {
                                    jumlahKuadranSRBB[6]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("C")) {
                                    jumlahKuadranSRBB[7]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("D")) {
                                    jumlahKuadranSRBB[8]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("E")) {
                                    jumlahKuadranSRBB[9]++;
                                }
                            }
                        }
                        String namaPIC = namaSRBB.get(row2);
                        modelSRBB.addRow(new Object[]{namaPIC, jumlahAgenSRBB, jumlahSaldoSRBB, jumlahSalesSRBB, jumlahTransaksiSRBB, jumlahFundingSRBB, jumlahRTs, jumlahRKs, jumlahKuadranSRBB[0], jumlahKuadranSRBB[1], jumlahKuadranSRBB[2], jumlahKuadranSRBB[3], jumlahKuadranSRBB[4], jumlahKuadranSRBB[5], jumlahKuadranSRBB[6], jumlahKuadranSRBB[7], jumlahKuadranSRBB[8], jumlahKuadranSRBB[9]});
                        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTable4.getModel());
                        jTable4.setRowSorter(sorter);
                        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        sorter.setSortKeys(sortKeys);
                        sorter.sort();
                        jumlahAgenSRBB = 0;
                        jumlahSaldoSRBB = 0;
                        jumlahSalesSRBB = 0;
                        jumlahTransaksiSRBB = 0;
                        jumlahFundingSRBB = 0;
                        jumlahRTs = 0;
                        jumlahRKs = 0;
                        for (int k = 0; k <= 9; k++) {
                            jumlahKuadranSRBB[k] = 0;
                        }
                    }

                    // Menempelkan pada tabel
                    int jumlahAgenSales = 0;
                    long jumlahSaldoSales = 0;
                    long jumlahSalesSales = 0;
                    long jumlahTransaksiSales = 0;
                    long jumlahFundingSales = 0;
                    long jumlahRTsales = 0;
                    long jumlahRKsales = 0;
                    long[] jumlahKuadranSales = new long[11];
                    for (int row2 = 0; row2 < namaSales.size(); row2++) {
                        DefaultTableModel modelSales = (DefaultTableModel) jTable8.getModel();
                        for (int rowI = 0; rowI < jTable1.getRowCount(); rowI++) {
                            String nama = (String) jTable1.getValueAt(rowI, 6);
                            long saldo = 0;
                            long sales = 0;
                            long jumlahtrans = 0;
                            long jumlahFundS = 0;
                            long jumlahRTsr = 0;
                            long jumlahRKsr = 0;
                            if (jTable1.getValueAt(rowI, 16) != "") {
                                saldo = (long) jTable1.getValueAt(rowI, 16);
                            } else {
                                saldo = 0;
                            }
                            if (jTable1.getValueAt(rowI, 20) != "") {
                                sales = (long) jTable1.getValueAt(rowI, 20);
                            } else {
                                sales = 0;
                            }
                            if (jTable1.getValueAt(rowI, 21) != "") {
                                jumlahtrans = (long) jTable1.getValueAt(rowI, 21);
                            } else {
                                jumlahtrans = 0;
                            }
                            if (jTable1.getValueAt(rowI, 19) != "") {
                                jumlahFundS = (long) jTable1.getValueAt(rowI, 19);
                            } else {
                                jumlahFundS = 0;
                            }
                            if (jTable1.getValueAt(rowI, 22) != "") {
                                jumlahRTsr = (long) jTable1.getValueAt(rowI, 22);
                            } else {
                                jumlahRTsr = 0;
                            }
                            if (jTable1.getValueAt(rowI, 23) != "") {
                                jumlahRKsr = (long) jTable1.getValueAt(rowI, 23);
                            } else {
                                jumlahRKsr = 0;
                            }
                            if (nama.equals(namaSales.get(row2))) {
                                jumlahAgenSales++;
                                jumlahSaldoSales += saldo;
                                jumlahSalesSales += sales;
                                System.out.println(saldo + " = " + sales);
                                jumlahTransaksiSales += jumlahtrans;
                                jumlahFundingSales += jumlahFundS;
                                jumlahRTsales += jumlahRTsr;
                                jumlahRKsales += jumlahRKsr;

                                if (jTable1.getValueAt(rowI, 15).toString().equals("A")) {
                                    jumlahKuadranSales[0]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("B")) {
                                    jumlahKuadranSales[1]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("C")) {
                                    jumlahKuadranSales[2]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("D")) {
                                    jumlahKuadranSales[3]++;
                                }
                                if (jTable1.getValueAt(rowI, 15).toString().equals("E")) {
                                    jumlahKuadranSales[4]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("A")) {
                                    jumlahKuadranSales[5]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("B")) {
                                    jumlahKuadranSales[6]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("C")) {
                                    jumlahKuadranSales[7]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("D")) {
                                    jumlahKuadranSales[8]++;
                                }
                                if (jTable1.getValueAt(rowI, 24).toString().equals("E")) {
                                    jumlahKuadranSales[9]++;
                                }
                            }
                        }
                        String namaPICsales = namaSales.get(row2);
                        modelSales.addRow(new Object[]{namaPICsales, jumlahAgenSales, jumlahSaldoSales, jumlahSalesSales, jumlahTransaksiSales, jumlahFundingSales, jumlahRTsales, jumlahRKsales, jumlahKuadranSales[0], jumlahKuadranSales[1], jumlahKuadranSales[2], jumlahKuadranSales[3], jumlahKuadranSales[4], jumlahKuadranSales[5], jumlahKuadranSales[6], jumlahKuadranSales[7], jumlahKuadranSales[8], jumlahKuadranSales[9]});
                        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTable8.getModel());
                        jTable8.setRowSorter(sorter);
                        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        sorter.setSortKeys(sortKeys);
                        sorter.sort();
                        jumlahAgenSales = 0;
                        jumlahSaldoSales = 0;
                        jumlahSalesSales = 0;
                        jumlahTransaksiSales = 0;
                        jumlahFundingSales = 0;
                        jumlahRTsales = 0;
                        jumlahRKsales = 0;
                        for (int k = 0; k <= 9; k++) {
                            jumlahKuadranSales[k] = 0;
                        }
                    }

                    System.out.println("");
                    selectedFile.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e);
                } finally {
                    frame.setVisible(false);
                }
            }
            ).start();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setSelectedFile(new File("Template.xlsx"));
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            File sourceFile = new File("data/Template.xlsx");
            File destFile = new File(fileToSave.getAbsolutePath());

            try {
                FileInputStream fis = new FileInputStream(sourceFile);
                FileOutputStream fos = new FileOutputStream(destFile);

                byte[] buffer = new byte[1024];

                int length;

                while ((length = fis.read(buffer)) > 0) {
                    fos.write(buffer, 0, length);
                }

                fos.close();
                fis.close();

//                JDialog sukses = new JDialog();
//                sukses.add(new JLabel("File Sudah Terdownload"));
//                sukses.setVisible(true);
                System.out.println("File sukses di copy...");
            } catch (FileNotFoundException e) {
                System.out.println("File tidak ditemukan ...");
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println("Gagal mengcopy file ..");
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Initializing excel
    Workbook workbook = new XSSFWorkbook();
    Sheet sheet2 = workbook.createSheet("Area");
    Sheet sheet3 = workbook.createSheet("Cluster");
    Sheet sheet4 = workbook.createSheet("Cabang");
    Sheet sheet5 = workbook.createSheet("Sales");
    Sheet sheet = workbook.createSheet("Database");
    CellStyle style = workbook.createCellStyle();
    CellStyle styleBelakang = workbook.createCellStyle();
    CellStyle headerUtama = workbook.createCellStyle();
    CellStyle isiUtama = workbook.createCellStyle();
    CellStyle isiUtamaKuadran = workbook.createCellStyle();
    CellStyle isiUtamaKuadranPersen = workbook.createCellStyle();
    CellStyle footerUtama = workbook.createCellStyle();
    CellStyle headerKonten = workbook.createCellStyle();
    CellStyle isiKonten = workbook.createCellStyle();
    CellStyle isiKontenKuadran = workbook.createCellStyle();
    CellStyle isiKontenPersen = workbook.createCellStyle();
    CellStyle footerKonten = workbook.createCellStyle();
    CellStyle footerKontenPersen = workbook.createCellStyle();
    CellStyle footerKontenKuadran = workbook.createCellStyle();
    CellStyle boldTitle = workbook.createCellStyle();
    CellStyle dropdownStyle = workbook.createCellStyle();

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
//        workbook = new XSSFWorkbook();
//        sheet = workbook.createSheet("Database");
//        sheet2 = workbook.createSheet("Area");

        // Style
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setSelectedFile(new File("Dashboard Cluster"));
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        fileChooser.setFileFilter(fnef);
        // Initialize Loading
        JFrame frame = new JFrame();
        ImageIcon loadGif = new ImageIcon("img/spinner.gif");
        JLabel loadingSplash = new JLabel(loadGif);
        frame.setUndecorated(true);
        frame.add(loadingSplash);
        frame.pack();
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            new Thread(() -> {
                frame.setLocationRelativeTo(jScrollPane1);
                frame.setVisible(true);
                File fileToSave = fileChooser.getSelectedFile();
                FileOutputStream excelFos = null;
                try {
                    Database();
                    Area();
                    Cluster();
                    Cabang();
                    SRBB();
                    excelFos = new FileOutputStream(fileToSave + ".xlsx");
                    workbook.write(excelFos);
                    excelFos.close();
                    workbook.close();
                    JOptionPane.showMessageDialog(null, "Export Selesai, File di " + fileToSave);
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, e + " : " + e.getStackTrace()[0].getLineNumber());
                } finally {
                    frame.setVisible(false);
                }
            }).start();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void Database() {
        // DATABASE
        // DATABASE
        DefaultTableModel cluster = (DefaultTableModel) jTable3.getModel();
        DefaultTableModel cabang = (DefaultTableModel) jTable2.getModel();
        DefaultTableModel srbb = (DefaultTableModel) jTable4.getModel();
        DefaultTableModel sales = (DefaultTableModel) jTable8.getModel();
        DefaultTableModel data = (DefaultTableModel) jTable5.getModel();
        DefaultTableModel data2 = (DefaultTableModel) jTable6.getModel();
        int totalColumn = cluster.getColumnCount() + cabang.getColumnCount() + srbb.getColumnCount() + srbb.getRowCount() + (data.getColumnCount() * 2) + 6;

        //HEADER CELL Database
        Row rowTitle = sheet.createRow(0);
        rowTitle.createCell(0).setCellValue("Per Cluster");
        rowTitle.createCell(cluster.getColumnCount() + 1).setCellValue("Per Cabang");
        rowTitle.createCell(cluster.getColumnCount() + cabang.getColumnCount() + 1).setCellFormula("Cluster!$B$2");
        rowTitle.createCell(cabang.getColumnCount() + cluster.getColumnCount() + 3).setCellValue("Per SRBB");
        rowTitle.createCell(cabang.getColumnCount() + srbb.getColumnCount() + cluster.getColumnCount() + 4).setCellValue("Per Data 1");
        rowTitle.createCell(data2.getColumnCount() + cabang.getColumnCount() + srbb.getColumnCount() + cluster.getColumnCount() + 4).setCellFormula("Sales!$B$2");
        rowTitle.createCell(cabang.getColumnCount() + data2.getColumnCount() + srbb.getColumnCount() + cluster.getColumnCount() + 6).setCellValue("Per Data 2");
        rowTitle.createCell(data2.getColumnCount() + cabang.getColumnCount() + data.getColumnCount() + srbb.getColumnCount() + cluster.getColumnCount() + 6).setCellFormula("Cabang!$C$4");
        for (int i = 0; i < srbb.getRowCount(); i++) {
            rowTitle.createCell(data2.getColumnCount() + data.getColumnCount() + cabang.getColumnCount() + srbb.getColumnCount() + cluster.getColumnCount() + i + 7).setCellValue((String) jTable4.getValueAt(i, 0));
        }

        //Header
        Row rowH = sheet.createRow(1);
        for (int j = 0; j < jTable3.getColumnCount(); j++) {
            Cell cell = rowH.createCell(j);
            cell.setCellValue(jTable3.getColumnName(j));
            cell.setCellStyle(style);
        }
        for (int j = 0; j < jTable2.getColumnCount(); j++) {
            Cell cell = rowH.createCell(j + jTable3.getColumnCount() + 1);
            cell.setCellValue(jTable2.getColumnName(j));
            cell.setCellStyle(style);
        }
        rowH.createCell(jTable2.getColumnCount() + jTable3.getColumnCount() + 1).setBlank();

        for (int j = 0; j < jTable4.getColumnCount(); j++) {
            Cell cell = rowH.createCell(j + jTable2.getColumnCount() + jTable3.getColumnCount() + 3);
            cell.setCellValue(jTable4.getColumnName(j));
            cell.setCellStyle(style);
        }
        for (int j = 0; j < jTable6.getColumnCount(); j++) {
            Cell cell = rowH.createCell(j + jTable2.getColumnCount() + jTable3.getColumnCount() + jTable4.getColumnCount() + 4);
            cell.setCellValue(jTable6.getColumnName(j));
            cell.setCellStyle(style);
        }
        rowH.createCell(jTable6.getColumnCount() + jTable4.getColumnCount() + jTable2.getColumnCount() + jTable3.getColumnCount() + 4).setBlank();

        for (int j = 0; j < jTable5.getColumnCount(); j++) {
            Cell cell = rowH.createCell(j + jTable6.getColumnCount() + jTable4.getColumnCount() + jTable2.getColumnCount() + jTable3.getColumnCount() + 6);
            cell.setCellValue(jTable5.getColumnName(j));
            cell.setCellStyle(style);
        }
        rowH.createCell(data.getColumnCount() + data2.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + srbb.getColumnCount() + srbb.getRowCount() + 6);

        //Buat Row
        for (int i = 0; i < jTable5.getRowCount(); i++) {
            Row row = sheet.createRow(i + 2);
            for (int j = 0; j <= totalColumn; j++) {
                Cell cell = row.createCell(j);
                cell.setBlank();
            }
        }

        // Isi Cluster
        for (int i = 0; i < jTable3.getRowCount(); i++) {
            Row row = sheet.getRow(i + 2);
            for (int j = 0; j < jTable3.getColumnCount(); j++) {
                Cell clusterCell = row.getCell(j);
                try {
                    clusterCell.setCellValue((Integer) jTable3.getValueAt(i, j));
                    clusterCell.setCellStyle(style);
                } catch (Exception e) {
                    try {
                        clusterCell.setCellValue((String) jTable3.getValueAt(i, j));
                        clusterCell.setCellStyle(style);
                    } catch (Exception a) {
                        clusterCell.setCellValue((long) jTable3.getValueAt(i, j));
                        clusterCell.setCellStyle(style);
                    }
                }
            }
        }

        // Total Kuadran
        String[] kuadran = new String[]{"A", "B", "C", "D", "E"};
        String[] kuadran2 = new String[]{"R", "S", "T", "U", "V"};
        for (int i = 0; i < 5; i++) {
            Row row = sheet.getRow(i + cluster.getRowCount() + 3);
            row.getCell(0).setCellValue(kuadran[i]);
            row.getCell(0).setCellStyle(styleBelakang);
            row.getCell(1).setCellFormula("SUM(" + kuadran2[i] + ":" + kuadran2[i] + ")");
            row.getCell(1).setCellStyle(styleBelakang);
        }

        //Isi Cabang
        for (int i = 0; i < cabang.getRowCount(); i++) {
            Row row = sheet.getRow(i + 2);
            for (int j = 0; j < cabang.getColumnCount(); j++) {
                Cell cabangCell = row.getCell(j + cluster.getColumnCount() + 1);
                row.getCell(cabang.getColumnCount() + cluster.getColumnCount() + 1).setCellFormula("IF($AU$1=Y" + (i + 3) + ",AU" + (i + 2) + "+1,0)");
                try {
                    cabangCell.setCellValue((Integer) jTable2.getValueAt(i, j));
                    cabangCell.setCellStyle(style);
                } catch (ClassCastException e) {
                    try {
                        cabangCell.setCellValue((String) jTable2.getValueAt(i, j));
                        cabangCell.setCellStyle(style);
                    } catch (ClassCastException a) {
                        cabangCell.setCellValue((long) jTable2.getValueAt(i, j));
                        cabangCell.setCellStyle(style);
                    }
                }
            }
        }

        //Isi SRBB
        for (int i = 0; i < sales.getRowCount(); i++) {
            Row row = sheet.getRow(i + 2);
            for (int j = 0; j < sales.getColumnCount(); j++) {
                Cell cell = row.getCell(j + cabang.getColumnCount() + cluster.getColumnCount() + 3);
                try {
                    cell.setCellValue((Integer) jTable8.getValueAt(i, j));
                    cell.setCellStyle(style);
                } catch (ClassCastException e) {
                    try {
                        cell.setCellValue((String) jTable8.getValueAt(i, j));
                        cell.setCellStyle(style);
                    } catch (ClassCastException a) {
                        cell.setCellValue((long) jTable8.getValueAt(i, j));
                        cell.setCellStyle(style);
                    }
                }
            }
        }

        //Isi Data 1
        for (int i = 0; i < data2.getRowCount(); i++) {
            Row row = sheet.getRow(i + 2);
            for (int j = 0; j < data2.getColumnCount(); j++) {
                Cell cell = row.getCell(j + srbb.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + 4);
                row.getCell(data.getColumnCount() + srbb.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + 4).setCellFormula("IF($CO$1=BV" + (i + 3) + ",CO" + (i + 2) + "+1,0)");
                try {
                    cell.setCellValue((Integer) jTable6.getValueAt(i, j));
                    cell.setCellStyle(style);
                } catch (ClassCastException e) {
                    try {
                        cell.setCellValue((String) jTable6.getValueAt(i, j));
                        cell.setCellStyle(style);
                    } catch (ClassCastException a) {
                        cell.setCellValue((long) jTable6.getValueAt(i, j));
                        cell.setCellStyle(style);
                    }
                }
            }
        }

        //Isi Data 2
        for (int i = 0; i < data.getRowCount(); i++) {
            Row row = sheet.getRow(i + 2);
            for (int j = 0; j < data.getColumnCount(); j++) {
                Cell cell = row.getCell(j + data2.getColumnCount() + srbb.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + 6);
                row.getCell(data2.getColumnCount() + data.getColumnCount() + srbb.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + 6).setCellFormula("IF($DP$1=CR" + (i + 3) + ",1,0)");
                String[] cellR = new String[]{"DQ", "DR", "DS", "DT", "DU", "DV", "DW", "DX", "DY", "DZ", "EA", "EB", "EC", "ED", "EE", "EF", "EG", "EH", "EI", "EJ"};
                for (int k = 0; k < srbb.getRowCount(); k++) {
                    row.getCell(data.getColumnCount() + data2.getColumnCount() + srbb.getColumnCount() + cabang.getColumnCount() + cluster.getColumnCount() + (k + 7)).setCellFormula("IF(IF(DP" + (i + 3) + "=1," + cellR[k] + "$1=CV" + (i + 3) + ",0)," + cellR[k] + (i + 2) + "+1,0)");
                }
                try {
                    cell.setCellValue((Integer) jTable5.getValueAt(i, j));
                    cell.setCellStyle(style);
                } catch (ClassCastException e) {
                    try {
                        cell.setCellValue((String) jTable5.getValueAt(i, j));
                        cell.setCellStyle(style);
                    } catch (ClassCastException a) {
                        cell.setCellValue((long) jTable5.getValueAt(i, j));
                        cell.setCellStyle(style);
                    }
                }
            }
        }
    }

    private void Area() {
        //Make Style header
        Font font = workbook.createFont();
        font.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());
        font.setBold(true);
        headerUtama.setFillForegroundColor(IndexedColors.BLUE_GREY.getIndex());
        headerUtama.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerUtama.setAlignment(HorizontalAlignment.CENTER);
        headerUtama.setFont(font);

        //Make Style isi
        isiUtama.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        isiUtama.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        isiUtama.setBorderTop(BorderStyle.THIN);
        isiUtama.setTopBorderColor(IndexedColors.WHITE.getIndex());
        isiUtama.setBorderLeft(BorderStyle.THIN);
        isiUtama.setLeftBorderColor(IndexedColors.WHITE.getIndex());
        isiUtama.setBorderRight(BorderStyle.THIN);
        isiUtama.setRightBorderColor(IndexedColors.WHITE.getIndex());
        isiUtama.setBorderBottom(BorderStyle.THIN);
        isiUtama.setBottomBorderColor(IndexedColors.WHITE.getIndex());
        isiUtama.setDataFormat(workbook.createDataFormat().getFormat("#,##0 "));

        //Make Style isi Kuadran
        isiUtamaKuadran.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        isiUtamaKuadran.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        isiUtamaKuadran.setAlignment(HorizontalAlignment.CENTER);
        isiUtamaKuadran.setBorderTop(BorderStyle.THIN);
        isiUtamaKuadran.setTopBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadran.setBorderLeft(BorderStyle.THIN);
        isiUtamaKuadran.setLeftBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadran.setBorderRight(BorderStyle.THIN);
        isiUtamaKuadran.setRightBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadran.setBorderBottom(BorderStyle.THIN);
        isiUtamaKuadran.setBottomBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadran.setDataFormat(workbook.createDataFormat().getFormat("#,##0"));

        //Make Style isi Kuadran Persen
        Font font3 = workbook.createFont();
        font3.setBold(true);
        isiUtamaKuadranPersen.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        isiUtamaKuadranPersen.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        isiUtamaKuadranPersen.setAlignment(HorizontalAlignment.CENTER);
        isiUtamaKuadranPersen.setBorderTop(BorderStyle.THIN);
        isiUtamaKuadranPersen.setTopBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadranPersen.setBorderLeft(BorderStyle.THIN);
        isiUtamaKuadranPersen.setLeftBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadranPersen.setBorderRight(BorderStyle.THIN);
        isiUtamaKuadranPersen.setRightBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadranPersen.setBorderBottom(BorderStyle.THIN);
        isiUtamaKuadranPersen.setBottomBorderColor(IndexedColors.WHITE.getIndex());
        isiUtamaKuadranPersen.setFont(font3);
        isiUtamaKuadranPersen.setDataFormat(workbook.createDataFormat().getFormat("0.0%"));

        //Make Style Footer Utama
        Font font2 = workbook.createFont();
        font2.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());
        font2.setBold(true);
        footerUtama.setFont(font2);
        footerUtama.setFillForegroundColor(IndexedColors.BLUE_GREY.getIndex());
        footerUtama.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        footerUtama.setAlignment(HorizontalAlignment.CENTER);
        footerUtama.setBorderTop(BorderStyle.THIN);
        footerUtama.setTopBorderColor(IndexedColors.WHITE.getIndex());
        footerUtama.setBorderLeft(BorderStyle.THIN);
        footerUtama.setLeftBorderColor(IndexedColors.WHITE.getIndex());
        footerUtama.setBorderRight(BorderStyle.THIN);
        footerUtama.setRightBorderColor(IndexedColors.WHITE.getIndex());
        footerUtama.setBorderBottom(BorderStyle.THIN);
        footerUtama.setBottomBorderColor(IndexedColors.WHITE.getIndex());

        //Make Style Header Konten
        Font font4 = workbook.createFont();
        font4.setBold(true);
        headerKonten.setFont(font4);
        headerKonten.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
        headerKonten.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerKonten.setAlignment(HorizontalAlignment.CENTER);
        headerKonten.setBorderTop(BorderStyle.THIN);
        headerKonten.setBorderLeft(BorderStyle.THIN);
        headerKonten.setBorderRight(BorderStyle.THIN);
        headerKonten.setBorderBottom(BorderStyle.THIN);

        //Make Style isi Konten
        isiKonten.setBorderTop(BorderStyle.THIN);
        isiKonten.setBorderLeft(BorderStyle.THIN);
        isiKonten.setBorderRight(BorderStyle.THIN);
        isiKonten.setBorderBottom(BorderStyle.THIN);
        isiKonten.setDataFormat(workbook.createDataFormat().getFormat("#,##0 "));

        //Make Style isi Konten Kuadran
        isiKontenKuadran.setAlignment(HorizontalAlignment.CENTER);
        isiKontenKuadran.setBorderTop(BorderStyle.THIN);
        isiKontenKuadran.setBorderLeft(BorderStyle.THIN);
        isiKontenKuadran.setBorderRight(BorderStyle.THIN);
        isiKontenKuadran.setBorderBottom(BorderStyle.THIN);
        isiKontenKuadran.setDataFormat(workbook.createDataFormat().getFormat("#,##0 "));

        //Make Style isi Konten Persen
        isiKontenPersen.setAlignment(HorizontalAlignment.CENTER);
        isiKontenPersen.setBorderTop(BorderStyle.THIN);
        isiKontenPersen.setBorderLeft(BorderStyle.THIN);
        isiKontenPersen.setBorderRight(BorderStyle.THIN);
        isiKontenPersen.setBorderBottom(BorderStyle.THIN);
        isiKontenPersen.setDataFormat(workbook.createDataFormat().getFormat("0.0%"));

        //Make Style footer Konten
        footerKonten.setFont(font4);
        footerKonten.setFillForegroundColor(IndexedColors.LIGHT_ORANGE.getIndex());
        footerKonten.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        footerKonten.setBorderTop(BorderStyle.THIN);
        footerKonten.setBorderLeft(BorderStyle.THIN);
        footerKonten.setBorderRight(BorderStyle.THIN);
        footerKonten.setBorderBottom(BorderStyle.THIN);
        footerKonten.setDataFormat(workbook.createDataFormat().getFormat("#,##0 "));

        //Make Style footer Konten Kuadran
        footerKontenKuadran.setFont(font4);
        footerKontenKuadran.setFillForegroundColor(IndexedColors.LIGHT_ORANGE.getIndex());
        footerKontenKuadran.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        footerKontenKuadran.setAlignment(HorizontalAlignment.CENTER);
        footerKontenKuadran.setBorderTop(BorderStyle.THIN);
        footerKontenKuadran.setBorderLeft(BorderStyle.THIN);
        footerKontenKuadran.setBorderRight(BorderStyle.THIN);
        footerKontenKuadran.setBorderBottom(BorderStyle.THIN);
        footerKontenKuadran.setDataFormat(workbook.createDataFormat().getFormat("#,##0"));

        //Make Style footer Konten Kuadran persen
        footerKontenPersen.setFont(font4);
        footerKontenPersen.setFillForegroundColor(IndexedColors.LIGHT_ORANGE.getIndex());
        footerKontenPersen.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        footerKontenPersen.setAlignment(HorizontalAlignment.CENTER);
        footerKontenPersen.setBorderTop(BorderStyle.THIN);
        footerKontenPersen.setBorderLeft(BorderStyle.THIN);
        footerKontenPersen.setBorderRight(BorderStyle.THIN);
        footerKontenPersen.setBorderBottom(BorderStyle.THIN);
        footerKontenPersen.setDataFormat(workbook.createDataFormat().getFormat("0.0%"));

        // Make Style Title
        boldTitle.setFont(font4);

        // Make Style DropDown
        dropdownStyle.setBorderTop(BorderStyle.THIN);
        dropdownStyle.setBorderLeft(BorderStyle.THIN);
        dropdownStyle.setBorderRight(BorderStyle.THIN);
        dropdownStyle.setBorderBottom(BorderStyle.THIN);

        //Make Row 1
        sheet2.createRow(0).createCell(0).setCellValue("Area Soloraya");
        sheet2.createRow(1).createCell(0).setCellValue(tanggalDatablast[1]);
        sheet2.getRow(0).getCell(0).setCellStyle(boldTitle);
        sheet2.getRow(1).getCell(0).setCellStyle(boldTitle);

        //Membuat Row
        for (int i = 0; i <= 16 + jTable3.getRowCount(); i++) {
            Row row = sheet2.createRow(i + 3);
            for (int j = 0; j <= jTable3.getColumnCount(); j++) {
                Cell cell = row.createCell(j);
                cell.setBlank();
            }
        }

        //Inisialisasi Array teks
        String[] detail = new String[]{"Area Head", "Cabang Kelolaan", "MKS Pengelolaan Agen", "Jumlah Agen", "Ratas Kelolaan Agen"};
        String[] rumusArea = new String[]{"SUM(Database!C:C)", "SUM(Database!D:D)", "SUM(Database!E:E)", "ROUNDUP(B7/B6,0)"};

        //
        //Membuat Data Kelolaan
        //
        for (int i = 0; i <= 4; i++) {
            Row row = sheet2.getRow(i + 3);
            Cell cell = row.getCell(0);
            cell.setCellValue(detail[i]);
        }
        for (int i = 1; i <= 4; i++) {
            sheet2.getRow(i + 3).getCell(0).setCellStyle(isiUtama);
        }
        sheet2.getRow(3).getCell(0).setCellStyle(headerUtama);

        //Membuat Data Rumus
        sheet2.getRow(3).getCell(1).setCellValue("Ony Suryono Widodo");
        sheet2.getRow(3).getCell(1).setCellStyle(headerUtama);
        for (int i = 0; i <= 3; i++) {
            Row row = sheet2.getRow(i + 4);
            Cell cell = row.getCell(1);
            cell.setCellFormula(rumusArea[i]);
            cell.setCellStyle(isiUtama);
        }

        //
        //Membuat Data Kuadran
        //
        String[] detail2 = new String[]{"Kuadran", "A", "B", "C", "%ABC", "%AC", "D", "E", "Total"};
        String[] rumus21 = new String[]{tanggalDatablast[0], "SUM(Database!M:M)", "SUM(Database!N:N)", "SUM(Database!O:O)", "IFERROR(SUM(E5:E7)/E12,0)", "IFERROR((E5+E7)/E12,0)", "SUM(Database!P:P)", "SUM(Database!Q:Q)", "SUM(E5:E7,E10:E11)"};
        String[] rumus22 = new String[]{tanggalDatablast[1], "SUM(Database!R:R)", "SUM(Database!S:S)", "SUM(Database!T:T)", "IFERROR(SUM(F5:F7)/F12,0)", "IFERROR((F5+F7)/F12,0)", "SUM(Database!U:U)", "SUM(Database!V:V)", "SUM(F10:F11,F5:F7)"};
        for (int i = 0; i < detail2.length; i++) {
            Row row = sheet2.getRow(i + 3);
            row.getCell(3).setCellValue(detail2[i]);
        }
        for (int i = 1; i < detail2.length - 1; i++) {
            sheet2.getRow(i + 3).getCell(3).setCellStyle(isiUtamaKuadran);
        }

        sheet2.getRow(3).getCell(4).setCellValue(rumus21[0]);
        sheet2.getRow(3).getCell(5).setCellValue(rumus22[0]);
        for (int i = 1; i < detail2.length; i++) {
            Row row = sheet2.getRow(i + 3);
            row.getCell(4).setCellFormula(rumus21[i]);
            row.getCell(5).setCellFormula(rumus22[i]);
        }
        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet2.getRow(i + 3);
            row.getCell(4).setCellStyle(isiUtamaKuadran);
            row.getCell(5).setCellStyle(isiUtamaKuadran);
        }
        sheet2.getRow(3).getCell(3).setCellStyle(headerUtama);
        sheet2.getRow(3).getCell(4).setCellStyle(headerUtama);
        sheet2.getRow(3).getCell(5).setCellStyle(headerUtama);

        sheet2.getRow(7).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet2.getRow(7).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet2.getRow(7).getCell(5).setCellStyle(isiUtamaKuadranPersen);
        sheet2.getRow(8).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet2.getRow(8).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet2.getRow(8).getCell(5).setCellStyle(isiUtamaKuadranPersen);

        sheet2.getRow(detail2.length + 2).getCell(3).setCellStyle(footerUtama);
        sheet2.getRow(rumus21.length + 2).getCell(4).setCellStyle(footerUtama);
        sheet2.getRow(rumus22.length + 2).getCell(5).setCellStyle(footerUtama);

        //
        //Membuat Data Kinerja
        //
        String[] detail3 = new String[]{"Transaksi", "Funding Agen", "Saldo Agen", "Sales Volume", "Rekening Turunan", "Referral Kredit"};
        String[] rumus3 = new String[]{"SUM(Database!H:H)", "SUM(Database!I:I)", "SUM(Database!F:F)", "SUM(Database!G:G)", "SUM(Database!J:J)", "SUM(Database!K:K)"};
        sheet2.getRow(9).getCell(0).setCellValue("Kinerja Agen BB");
        sheet2.getRow(9).getCell(0).setCellStyle(headerUtama);
        sheet2.getRow(9).getCell(1).setCellStyle(headerUtama);
        for (int i = 0; i < detail3.length; i++) {
            Row row = sheet2.getRow(i + 10);
            row.getCell(0).setCellValue(detail3[i]);
            row.getCell(1).setCellFormula(rumus3[i]);
            row.getCell(0).setCellStyle(isiUtama);
            row.getCell(1).setCellStyle(isiUtama);
        }

        //
        //Membuat Data Table
        //
        sheet2.getRow(17).getCell(0).setCellValue("Agen BB per Cluster");
        sheet2.getRow(17).getCell(0).setCellStyle(boldTitle);

        //Membuat Header
        String[] header = new String[]{"Cluster", "Jumlah Cabang", "MKS Pengelola Agen", "Agen", "Transaksi", "Sales Volume", "Saldo Agen", "Funding", "Rekening Turunan", "Referral Kredit", "Ratas Kelolaan", "A", "B", "C", "%", "D", "E"};
        for (int i = 0; i < header.length; i++) {
            Row row = sheet2.getRow(18);
            Cell cell = row.getCell(i);
            cell.setCellValue(header[i]);
            cell.setCellStyle(headerKonten);
        }

        //Isi
        String[] isi = new String[]{"A", "C", "D", "E", "H", "G", "F", "I", "J", "K", "L", "R", "S", "T", "U", "V"};
        for (int i = 0; i < jTable3.getRowCount(); i++) {
            Row row = sheet2.getRow(i + 19);
            for (int j = 0; j < isi.length - 2; j++) {
                Cell cell = row.getCell(j);
                cell.setCellFormula("Database!" + isi[j] + (i + 3));
                cell.setCellStyle(isiKonten);
            }
        }

        for (int i = 0; i < jTable3.getRowCount(); i++) {
            Row row = sheet2.getRow(i + 19);
            for (int j = isi.length - 2; j < isi.length; j++) {
                Cell cell = row.getCell(j + 1);
                cell.setCellFormula("Database!" + isi[j] + (i + 3));
                cell.setCellStyle(isiKonten);
            }
            for (int j = 11; j < 17; j++) {
                Cell cell = row.getCell(j);
                cell.setCellStyle(isiKontenKuadran);
            }
        }

        for (int i = 0; i < jTable3.getRowCount(); i++) {
            Row row = sheet2.getRow(i + 19);
            Cell cell = row.getCell(isi.length - 2);
            cell.setCellFormula("IFERROR(SUM(L" + (i + 20) + ":N" + (i + 20) + ")/SUM(L" + (i + 20) + ":N" + (i + 20) + ",P" + (i + 20) + ":Q" + (i + 20) + "),\"\")");
            cell.setCellStyle(isiKontenPersen);
        }

        //
        // Membuat Piechart
        //
        XSSFDrawing drawing = (XSSFDrawing) sheet2.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 7, 3, 12, 13);

        XSSFChart chart = drawing.createChart(anchor);
        chart.setTitleText("Kuadran");
        chart.setTitleOverlay(false);

        XDDFChartLegend legend = chart.getOrAddLegend();
        legend.setPosition(LegendPosition.TOP_RIGHT);

        XDDFDataSource<String> kuadran = XDDFDataSourcesFactory.fromStringCellRange((XSSFSheet) sheet, new CellRangeAddress(8, 12, 0, 0));

        XDDFNumericalDataSource<Double> values = XDDFDataSourcesFactory.fromNumericCellRange((XSSFSheet) sheet, new CellRangeAddress(8, 12, 1, 1));

        XDDFChartData data = chart.createData(ChartTypes.PIE, null, null);// chart.createData(ChartTypes.PIE,
        // null, null);
        data.setVaryColors(true);
        data.addSeries(kuadran, values);
        chart.plot(data);

        // Set Column
        for (int i = 0; i < 11; i++) {
            sheet2.autoSizeColumn(i);
        }
        for (int i = 11; i < 17; i++) {
            sheet2.setColumnWidth(i, 5 * 256);
        }

        // Merge Cell
        sheet2.addMergedRegion(new CellRangeAddress(9, 9, 0, 1));
    }

    private void Cluster() {
        //Ambil Data jumlahCabangTerbanyak
        int jumlahCabangTerbanyak = 0;
        String[] cluster = new String[jTable3.getRowCount()];
        for (int i = 0; i < jTable3.getRowCount(); i++) {
            cluster[i] = (String) jTable3.getValueAt(i, 0);
            if (jumlahCabangTerbanyak < (int) jTable3.getValueAt(i, 2)) {
                jumlahCabangTerbanyak = (int) jTable3.getValueAt(i, 2);
            }
        }

        //Membuat Row
        for (int i = 0; i <= 18 + jumlahCabangTerbanyak; i++) {
            Row row = sheet3.createRow(i);
            for (int j = 0; j <= 18; j++) {
                row.createCell(j).setBlank();
            }
        }

        //Membuat data dropdown
        sheet3.getRow(1).createCell(0).setCellValue("Pilih Cluster :");
        sheet3.getRow(1).getCell(0).setCellStyle(dropdownStyle);
        sheet3.getRow(1).getCell(1).setCellValue(cluster[0]);
        sheet3.getRow(1).getCell(1).setCellStyle(dropdownStyle);
        DataValidationHelper validationHelper = new XSSFDataValidationHelper((XSSFSheet) sheet3);
        CellRangeAddressList addressList = new CellRangeAddressList(1, 1, 1, 1);
        DataValidationConstraint constraint = validationHelper.createExplicitListConstraint(cluster);
        DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
        dataValidation.setSuppressDropDownArrow(true);
        sheet3.addValidationData(dataValidation);

        //Membuat data cluster agen
        //Inisialisasi Array teks
        String[] detail = new String[]{"Manager", "MKS Pengelolaan Agen", "Jumlah Cabang", "Jumlah Agen", "Ratas Kelolaan Agen/MKS"};
        String[] rumus = new String[]{"VLOOKUP($B$2,Database!$A:$B,2,0)", "VLOOKUP($B$2,Database!$A:$D,4,0)", "VLOOKUP($B$2,Database!$A:$C,3,0)", "VLOOKUP($B$2,Database!$A:$E,5,0)", "ROUNDUP($B$7/$B$5,0)"};
        for (int i = 0; i < detail.length; i++) {
            Row row = sheet3.getRow(i + 3);
            Cell cell = row.getCell(0);
            cell.setCellValue(detail[i]);
        }
        sheet3.getRow(3).getCell(0).setCellStyle(headerUtama);
        sheet3.getRow(3).getCell(1).setCellStyle(headerUtama);
        for (int i = 1; i < detail.length; i++) {
            Row row = sheet3.getRow(i + 3);
            Cell cell = row.getCell(0);
            cell.setCellStyle(isiUtama);
        }
        //Membuat Data Rumus
        for (int i = 0; i < rumus.length; i++) {
            Row row = sheet3.getRow(i + 3);
            Cell cell = row.getCell(1);
            cell.setCellFormula(rumus[i]);
        }
        for (int i = 1; i < rumus.length; i++) {
            Row row = sheet3.getRow(i + 3);
            Cell cell = row.getCell(1);
            cell.setCellStyle(isiUtama);
        }

        //
        //Membuat Data Kuadran
        //
        String[] detail2 = new String[]{"Kuadran", "A", "B", "C", "%ABC", "%AC", "D", "E", "Total"};
        String[] rumus21 = new String[]{tanggalDatablast[0], "VLOOKUP($B$2,Database!$A:$M,13,0)", "VLOOKUP($B$2,Database!$A:$N,14,0)", "VLOOKUP($B$2,Database!$A:$O,15,0)", "IFERROR(SUM(E5:E7)/E12,0)", "IFERROR((E5+E7)/E12,0)", "VLOOKUP($B$2,Database!$A:$P,16,0)", "VLOOKUP($B$2,Database!$A:$Q,17,0)", "SUM(E10:E11,E5:E7)"};
        String[] rumus22 = new String[]{tanggalDatablast[1], "VLOOKUP($B$2,Database!$A:$R,18,0)", "VLOOKUP($B$2,Database!$A:$S,19,0)", "VLOOKUP($B$2,Database!$A:$T,20,0)", "IFERROR(SUM(F5:F7)/F12,0)", "IFERROR((F5+F7)/F12,0)", "VLOOKUP($B$2,Database!$A:$U,21,0)", "VLOOKUP($B$2,Database!$A:$V,22,0)", "SUM(F10:F11,F5:F7)"};
        for (int i = 0; i < detail2.length; i++) {
            Row row = sheet3.getRow(i + 3);
            row.getCell(3).setCellValue(detail2[i]);
        }

        sheet3.getRow(3).getCell(3).setCellStyle(headerUtama);
        sheet3.getRow(3).getCell(4).setCellStyle(headerUtama);
        sheet3.getRow(3).getCell(5).setCellStyle(headerUtama);
        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet3.getRow(i + 3);
            row.getCell(3).setCellStyle(isiUtamaKuadran);
        }

        sheet3.getRow(3).getCell(4).setCellValue(rumus21[0]);
        sheet3.getRow(3).getCell(5).setCellValue(rumus22[0]);
        for (int i = 1; i < detail2.length; i++) {
            Row row = sheet3.getRow(i + 3);
            row.getCell(4).setCellFormula(rumus21[i]);
            row.getCell(5).setCellFormula(rumus22[i]);
        }

        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet3.getRow(i + 3);
            row.getCell(4).setCellStyle(isiUtamaKuadran);
            row.getCell(5).setCellStyle(isiUtamaKuadran);
        }
        sheet3.getRow(7).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet3.getRow(7).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet3.getRow(7).getCell(5).setCellStyle(isiUtamaKuadranPersen);
        sheet3.getRow(8).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet3.getRow(8).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet3.getRow(8).getCell(5).setCellStyle(isiUtamaKuadranPersen);

        sheet3.getRow(detail2.length + 2).getCell(3).setCellStyle(headerUtama);
        sheet3.getRow(detail2.length + 2).getCell(4).setCellStyle(headerUtama);
        sheet3.getRow(detail2.length + 2).getCell(5).setCellStyle(headerUtama);

        //
        //Membuat Data Kinerja
        //
        String[] detail3 = new String[]{"Transaksi", "Funding Agen", "Saldo Agen", "Sales Volume", "Rekening Turunan", "Referral Kredit"};
        String[] rumus3 = new String[]{"VLOOKUP($B$2,Database!$A:$H,8,0)", "VLOOKUP($B$2,Database!$A:$I,9,0)", "VLOOKUP($B$2,Database!$A:$F,6,0)", "VLOOKUP($B$2,Database!$A:$G,7,0)", "VLOOKUP($B$2,Database!$A:$J,10,0)", "VLOOKUP($B$2,Database!$A:$K,11,0)"};
        sheet3.getRow(9).getCell(0).setCellValue("Kinerja Agen BB");
        sheet3.getRow(9).getCell(0).setCellStyle(headerUtama);
        for (int i = 0; i < detail3.length; i++) {
            Row row = sheet3.getRow(i + 10);
            row.getCell(0).setCellValue(detail3[i]);
            row.getCell(1).setCellFormula(rumus3[i]);
            row.getCell(0).setCellStyle(isiUtama);
            row.getCell(1).setCellStyle(isiUtama);
        }

        //Membuat Header
        String[] header = new String[]{"Cabang", "MKS Pengelola Agen", "Jumlah Agen", "Saldo Agen", "Sales Volume", "Jumlah Transaksi", "Funding", "Rekening Turunan", "Referral Kredit", "Ratas Kelolaan", "A", "B", "C", "%", "D", "E"};
        for (int i = 0; i < header.length; i++) {
            Row row = sheet3.getRow(17);
            Cell cell = row.getCell(i);
            cell.setCellValue(header[i]);
            cell.setCellStyle(headerKonten);
        }

        //Isi
        for (int i = 0; i < jumlahCabangTerbanyak; i++) {
            Row row = sheet3.getRow(i + 18);
            for (int j = 0; j < header.length - 6; j++) {
                Cell cell = row.getCell(j);
                cell.setCellFormula("IFERROR(INDEX(Database!$AA:$AU,MATCH(Q" + (i + 19) + ",Database!$AU:$AU,0)," + (j + 1) + "),\"\")");
                cell.setCellStyle(isiKonten);
            }
        }
        for (int i = 0; i < jumlahCabangTerbanyak; i++) {
            Row row = sheet3.getRow(i + 18);
            Cell cell = row.getCell(header.length - 3);
            cell.setCellFormula("IFERROR(SUM(K" + (i + 19) + ":M" + (i + 19) + ")/SUM(K" + (i + 19) + ":M" + (i + 19) + ",O" + (i + 19) + ":P" + (i + 19) + "),\"\")");
            cell.setCellStyle(isiKontenPersen);
        }
        for (int i = 0; i < jumlahCabangTerbanyak; i++) {
            Row row = sheet3.getRow(i + 18);
            for (int j = header.length - 6; j < header.length - 3; j++) {
                Cell cell = row.getCell(j);
                cell.setCellFormula("IFERROR(INDEX(Database!$AA:$AU,MATCH(Q" + (i + 19) + ",Database!$AU:$AU,0)," + (j + 6) + "),\"\")");
                cell.setCellStyle(isiKontenKuadran);
            }
        }

        // Membuat style huruf putih
        Font font = workbook.createFont();
        font.setColor(HSSFColor.HSSFColorPredefined.WHITE.getIndex());
        styleBelakang.setFont(font);
        for (int i = 0; i < jumlahCabangTerbanyak; i++) {
            Row row = sheet3.getRow(i + 18);
            for (int j = header.length - 2; j < header.length; j++) {
                Cell cell = row.getCell(j);
                cell.setCellFormula("IFERROR(INDEX(Database!$AA:$AU,MATCH(Q" + (i + 19) + ",Database!$AU:$AU,0)," + (j + 5) + "),\"\")");
                cell.setCellStyle(isiKontenKuadran);
                row.getCell(header.length).setCellValue(i + 1);
                row.getCell(header.length).setCellStyle(styleBelakang);
            }
        }

        //
        // Membuat Total
        //
        String[] footer = new String[]{"B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"};
        sheet3.getRow(18 + jumlahCabangTerbanyak).getCell(0).setCellValue("Jumlah");
        sheet3.getRow(18 + jumlahCabangTerbanyak).getCell(0).setCellStyle(footerKonten);
        for (int i = 0; i < header.length - 4; i++) {
            Row row = sheet3.getRow(18 + jumlahCabangTerbanyak);
            Cell cell = row.getCell(i + 1);
            cell.setCellFormula("SUM(" + footer[i] + "19:" + footer[i] + "30)");
            cell.setCellStyle(footerKonten);
        }

        for (int i = 0; i < 3; i++) {
            Row row = sheet3.getRow(18 + jumlahCabangTerbanyak);
            Cell cell = row.getCell(i + 10);
            cell.setCellStyle(footerKontenKuadran);
        }
        sheet3.getRow(18 + jumlahCabangTerbanyak).getCell(header.length - 3).setCellFormula("IFERROR(SUM(K" + (19 + jumlahCabangTerbanyak) + ":M" + (19 + jumlahCabangTerbanyak) + ")/SUM(K" + (19 + jumlahCabangTerbanyak) + ":M" + (19 + jumlahCabangTerbanyak) + ",O" + (19 + jumlahCabangTerbanyak) + ":P" + (19 + jumlahCabangTerbanyak) + "),0)");
        sheet3.getRow(18 + jumlahCabangTerbanyak).getCell(header.length - 3).setCellStyle(footerKontenPersen);
        for (int i = header.length - 2; i < header.length; i++) {
            Row row = sheet3.getRow(18 + jumlahCabangTerbanyak);
            Cell cell = row.getCell(i);
            cell.setCellFormula("SUM(" + footer[i - 1] + "19:" + footer[i - 1] + "30)");
            cell.setCellStyle(footerKontenKuadran);
        }
        // Total Kuadran untuk Cluster
        String[] kuadran1 = new String[]{"A", "B", "C", "D", "E"};
        String[] kuadran2 = new String[]{"VLOOKUP($B$2,Database!$A:$R,18,0)", "VLOOKUP($B$2,Database!$A:$S,19,0)", "VLOOKUP($B$2,Database!$A:$T,20,0)", "VLOOKUP($B$2,Database!$A:$U,21,0)", "VLOOKUP($B$2,Database!$A:$V,22,0)"};
        for (int i = 0; i < kuadran1.length; i++) {
            Row row = sheet3.getRow(i + 3);
            row.getCell(8).setCellValue(kuadran1[i]);
            row.getCell(8).setCellStyle(styleBelakang);
            row.getCell(9).setCellFormula(kuadran2[i]);
            row.getCell(9).setCellStyle(styleBelakang);
        }

        //
        // Membuat Piechart
        //
        XSSFDrawing drawing = (XSSFDrawing) sheet3.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 7, 3, 12, 13);

        XSSFChart chart = drawing.createChart(anchor);
        chart.setTitleText("Kuadran");
        chart.setTitleOverlay(false);

        XDDFChartLegend legend = chart.getOrAddLegend();
        legend.setPosition(LegendPosition.TOP_RIGHT);

        XDDFDataSource<String> kuadran = XDDFDataSourcesFactory.fromStringCellRange((XSSFSheet) sheet3, new CellRangeAddress(3, 7, 8, 8));

        XDDFNumericalDataSource<Double> values = XDDFDataSourcesFactory.fromNumericCellRange((XSSFSheet) sheet3, new CellRangeAddress(3, 7, 9, 9));

        XDDFChartData data = chart.createData(ChartTypes.PIE, null, null);// chart.createData(ChartTypes.PIE,
        // null, null);
        data.setVaryColors(true);
        data.addSeries(kuadran, values);
        chart.plot(data);

        // Set Column
        for (int i = 0; i < 10; i++) {
            sheet3.autoSizeColumn(i);
        }
        for (int i = 10; i < 16; i++) {
            sheet3.setColumnWidth(i, 5 * 256);
        }

        // Merge Cell
        sheet3.addMergedRegion(new CellRangeAddress(9, 9, 0, 1));
    }

    private void Cabang() {
        //Ambil jumlahAgenTerbanyak
        int jumlahAgenTerbanyak = 0;
        for (int i = 0; i < jTable2.getRowCount(); i++) {
            if (jumlahAgenTerbanyak < (int) jTable2.getValueAt(i, 5)) {
                jumlahAgenTerbanyak = (int) jTable2.getValueAt(i, 5);
            }
        }

        //Membuat Row
        for (int i = 0; i <= 19 + ((jumlahAgenTerbanyak + 3) * (jTable4.getRowCount())); i++) {
            Row row = sheet4.createRow(i);
            for (int j = 0; j <= 20; j++) {
                row.createCell(j).setBlank();
            }
        }

        //Ambil Data Cabang
        String cabangPertama = (String) jTable7.getValueAt(0, 0).toString() + " - " + (String) jTable7.getValueAt(0, 3).toString();
        for (int i = 0; i < jTable7.getRowCount(); i++) {
            Row row = sheet4.getRow(i);
            row.getCell(19).setCellValue(jTable7.getValueAt(i, 0).toString() + " - " + (String) jTable7.getValueAt(i, 3).toString());
            row.getCell(19).setCellStyle(styleBelakang);
            row.getCell(20).setCellValue((int) jTable7.getValueAt(i, 0));
            row.getCell(20).setCellStyle(styleBelakang);
        }

        //Membuat data dropdown
        sheet4.getRow(1).getCell(0).setCellValue("Pilih Cabang :");
        sheet4.getRow(1).getCell(1).setCellValue(cabangPertama);
        sheet4.getRow(1).getCell(0).setCellStyle(dropdownStyle);
        sheet4.getRow(1).getCell(1).setCellStyle(dropdownStyle);
        DataValidationHelper validationHelper = sheet4.getDataValidationHelper();
        DataValidationConstraint constraint = validationHelper.createFormulaListConstraint("$T$1:$T$" + jTable7.getRowCount());
        CellRangeAddressList addressList = new CellRangeAddressList(1, 1, 1, 1);
        DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
        dataValidation.setSuppressDropDownArrow(true);
        sheet4.addValidationData(dataValidation);
        sheet4.getRow(3).getCell(2).setCellFormula("VLOOKUP($B$2,$T:$U,2,0)");
        sheet4.getRow(3).getCell(2).setCellStyle(styleBelakang);

        //Membuat data cabang agen
        //Inisialisasi Array teks
        String[] detail = new String[]{"Manager", "Cluster", "MKS Pengelolaan Agen", "Jumlah Agen", "Ratas Kelolaan Agen/MKS"};
        String[] rumus = new String[]{"VLOOKUP($C$4,Database!$X:$Z,3,0)", "VLOOKUP($C$4,Database!$X:$Y,2,0)", "VLOOKUP($C$4,Database!$X:$AB,5,0)", "VLOOKUP($C$4,Database!$X:$AC,6,0)", "IFERROR(ROUNDUP($B$7/$B$6,1),0)"};
        for (int i = 0; i < detail.length; i++) {
            Row row = sheet4.getRow(i + 3);
            Cell cell = row.getCell(0);
            cell.setCellValue(detail[i]);
        }
        sheet4.getRow(3).getCell(0).setCellStyle(headerUtama);
        for (int i = 1; i < detail.length; i++) {
            Row row = sheet4.getRow(i + 3);
            Cell cell = row.getCell(0);
            cell.setCellStyle(isiUtama);
        }

        // Membuat Data Rumus
        for (int i = 0; i < rumus.length; i++) {
            Row row = sheet4.getRow(i + 3);
            Cell cell = row.getCell(1);
            cell.setCellFormula(rumus[i]);
        }
        sheet4.getRow(3).getCell(1).setCellStyle(headerUtama);
        for (int i = 1; i < rumus.length; i++) {
            Row row = sheet4.getRow(i + 3);
            Cell cell = row.getCell(1);
            cell.setCellStyle(isiUtama);
        }

        //
        //Membuat Data Kuadran
        //
        String[] detail2 = new String[]{"Kuadran", "A", "B", "C", "%ABC", "%AC", "D", "E", "Total"};
        String[] rumus21 = new String[]{tanggalDatablast[0], "VLOOKUP($C$4,Database!$X:$AK,14,0)", "VLOOKUP($C$4,Database!$X:$AL,15,0)", "VLOOKUP($C$4,Database!$X:$AM,16,0)", "IFERROR(SUM(E5:E7)/E12,0)", "IFERROR((E5+E7)/E12,0)", "VLOOKUP($C$4,Database!$X:$AN,17,0)", "VLOOKUP($C$4,Database!$X:$AO,18,0)", "SUM(E10:E11,E5:E7)"};
        String[] rumus22 = new String[]{tanggalDatablast[1], "VLOOKUP($C$4,Database!$X:$AP,19,0)", "VLOOKUP($C$4,Database!$X:$AQ,20,0)", "VLOOKUP($C$4,Database!$X:$AR,21,0)", "IFERROR(SUM(F5:F7)/F12,0)", "IFERROR((F5+F7)/F12,0)", "VLOOKUP($C$4,Database!$X:$AS,22,0)", "VLOOKUP($C$4,Database!$X:$AT,23,0)", "SUM(F10:F11,F5:F7)"};
        for (int i = 0; i < detail2.length; i++) {
            Row row = sheet4.getRow(i + 3);
            row.getCell(3).setCellValue(detail2[i]);
        }
        //Style isikuadran
        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet4.getRow(i + 3);
            row.getCell(3).setCellStyle(isiUtamaKuadran);
        }

        //Header kuadran
        sheet4.getRow(3).getCell(4).setCellValue(rumus21[0]);
        sheet4.getRow(3).getCell(5).setCellValue(rumus22[0]);

        //Style Header Kuadran
        sheet4.getRow(3).getCell(3).setCellStyle(headerUtama);
        sheet4.getRow(3).getCell(4).setCellStyle(headerUtama);
        sheet4.getRow(3).getCell(5).setCellStyle(headerUtama);
        for (int i = 1; i < detail2.length; i++) {
            Row row = sheet4.getRow(i + 3);
            row.getCell(4).setCellFormula(rumus21[i]);
            row.getCell(5).setCellFormula(rumus22[i]);
        }
        //Style isi Kuadran
        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet4.getRow(i + 3);
            row.getCell(4).setCellStyle(isiUtamaKuadran);
            row.getCell(5).setCellStyle(isiUtamaKuadran);
        }

        //Style Persen Kuadran
        sheet4.getRow(7).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet4.getRow(7).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet4.getRow(7).getCell(5).setCellStyle(isiUtamaKuadranPersen);
        sheet4.getRow(8).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet4.getRow(8).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet4.getRow(8).getCell(5).setCellStyle(isiUtamaKuadranPersen);

        //Style Footer Kuadran
        sheet4.getRow(detail2.length + 2).getCell(3).setCellStyle(footerUtama);
        sheet4.getRow(detail2.length + 2).getCell(4).setCellStyle(footerUtama);
        sheet4.getRow(detail2.length + 2).getCell(5).setCellStyle(footerUtama);

        //
        //Membuat Data Kinerja
        //
        String[] detail3 = new String[]{"Transaksi", "Funding Agen", "Saldo Agen", "Sales Volume", "Rekening Turunan", "Referral Kredit"};
        String[] rumus3 = new String[]{"VLOOKUP($C$4,Database!$X:$AF,9,0)", "VLOOKUP($C$4,Database!$X:$AG,10,0)", "VLOOKUP($C$4,Database!$X:$AD,7,0)", "VLOOKUP($C$4,Database!$X:$AE,8,0)", "VLOOKUP($C$4,Database!$X:$AH,11,0)", "VLOOKUP($C$4,Database!$X:$AI,12,0)"};
        sheet4.getRow(9).getCell(0).setCellValue("Kinerja Agen BB");
        sheet4.getRow(9).getCell(0).setCellStyle(headerUtama);
        for (int i = 0; i < detail3.length; i++) {
            Row row = sheet4.getRow(i + 10);
            row.getCell(0).setCellValue(detail3[i]);
            row.getCell(1).setCellFormula(rumus3[i]);
        }
        //Style Kinerja
        for (int i = 0; i < detail3.length; i++) {
            Row row = sheet4.getRow(i + 10);
            row.getCell(0).setCellStyle(isiUtama);
            row.getCell(1).setCellStyle(isiUtama);
        }

        //
        //Membuat Data Agen per SRBB
        //
        //Membuat Header
        String[] header = new String[]{"Agen", "Transaksi", "Sales Volume", "Saldo Agen", "Funding", "Rekening Turunan", "Referral Kredit", "Kuadran"};
        int jumlahSRBB = jTable4.getRowCount();
        int Kolom1 = (int) jumlahSRBB / 2;
        int Kolom2 = jumlahSRBB - Kolom1;

        // Nama SRBB
        for (int i = 0; i < Kolom2; i++) {
            Row row = sheet4.getRow(17 + (jumlahAgenTerbanyak * i) + (i * 4));
            row.getCell(0).setCellValue((String) jTable4.getValueAt(i, 0));
            row.getCell(0).setCellStyle(boldTitle);
        }
        for (int i = 0; i < Kolom1; i++) {
            Row row = sheet4.getRow(17 + (jumlahAgenTerbanyak * i) + (i * 4));
            row.getCell(header.length + 1).setCellValue((String) jTable4.getValueAt(i + Kolom2, 0));
            row.getCell(header.length + 1).setCellStyle(boldTitle);
        }

        // Header
        for (int i = 0; i < Kolom2; i++) {
            Row row = sheet4.getRow(18 + (jumlahAgenTerbanyak * i) + (i * 4));
            for (int j = 0; j < header.length; j++) {
                Cell cell = row.getCell(j);
                cell.setCellValue(header[j]);
                cell.setCellStyle(headerKonten);
            }
        }
        for (int i = 0; i < Kolom1; i++) {
            Row row = sheet4.getRow(18 + (jumlahAgenTerbanyak * i) + (i * 4));
            for (int j = 0; j < header.length; j++) {
                Cell cell = row.getCell(header.length + j + 1);
                cell.setCellValue(header[j]);
                cell.setCellStyle(headerKonten);
            }
        }

        //Isi
        String[] kolom1 = new String[]{"DQ", "DR", "DS", "DT", "DU", "DV", "DW", "DX", "DY", "DZ", "EA", "EB", "EC", "ED", "EE", "EF", "EG", "EH", "EI", "EJ", "EK", "EL", "EM", "EN", "EO", "EP"};
        String[] kolom2 = new String[]{"4", "22", "21", "17", "20", "23", "24", "25",};
        String[] kolom3 = new String[]{"B", "C", "D", "E", "F", "G", "H"};
        String[] kolom4 = new String[]{"K", "L", "M", "N", "O", "P", "Q"};
        for (int h = 0; h < Kolom2; h++) {
            for (int i = 0; i < jumlahAgenTerbanyak; i++) {
                Row row = sheet4.getRow(19 + i + (jumlahAgenTerbanyak * h) + (h * 4));
                for (int j = 0; j < header.length; j++) {
                    Cell cell = row.getCell(j);
                    cell.setCellFormula("IFERROR(INDEX(Database!$CQ:$" + (kolom1[h]) + ",MATCH(I" + (19 + i + (jumlahAgenTerbanyak * h) + (h * 4) + 1) + ",Database!$" + (kolom1[h]) + ":$" + (kolom1[h]) + ",0)," + (kolom2[j]) + "),\"\")");
                    cell.setCellStyle(isiKonten);
                    row.getCell(header.length).setCellValue(i + 1);
                    row.getCell(header.length).setCellStyle(styleBelakang);
                }
            }
            sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4)).getCell(0).setCellValue("Total");
            sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4)).getCell(0).setCellStyle(footerKonten);
            for (int j = 1; j < header.length; j++) {
                Row row2 = sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4));
                row2.getCell(j).setCellFormula("SUM(" + (kolom3[j - 1]) + (String.valueOf(20 + (jumlahAgenTerbanyak * h) + (h * 4))) + ":" + (kolom3[j - 1]) + (String.valueOf(20 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) - 1 + (h * 4))) + ")");
                row2.getCell(j).setCellStyle(footerKonten);
            }
        }
        for (int h = 0; h < Kolom1; h++) {
            for (int i = 0; i < jumlahAgenTerbanyak; i++) {
                Row row = sheet4.getRow(19 + i + (jumlahAgenTerbanyak * h) + (h * 4));
                for (int j = 0; j < header.length; j++) {
                    Cell cell = row.getCell(j + header.length + 1);
                    cell.setCellFormula("IFERROR(INDEX(Database!$CQ:$" + (kolom1[Kolom2 + h]) + ",MATCH(R" + (19 + i + (jumlahAgenTerbanyak * h) + (h * 4) + 1) + ",Database!$" + (kolom1[Kolom2 + h]) + ":$" + (kolom1[Kolom2 + h]) + ",0)," + (kolom2[j]) + "),\"\")");
                    cell.setCellStyle(isiKonten);
                    row.getCell(17).setCellValue(i + 1);
                    row.getCell(17).setCellStyle(styleBelakang);
                }
            }
            sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4)).getCell(header.length + 1).setCellValue("Total");
            sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4)).getCell(header.length + 1).setCellStyle(footerKonten);
            for (int j = 1; j < header.length; j++) {
                Row row2 = sheet4.getRow(19 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) + (h * 4));
                row2.getCell(j + header.length + 1).setCellFormula("SUM(" + (kolom4[j - 1]) + (String.valueOf(20 + (jumlahAgenTerbanyak * h) + (h * 4))) + ":" + (kolom4[j - 1]) + (String.valueOf(20 + jumlahAgenTerbanyak + (jumlahAgenTerbanyak * h) - 1 + +(h * 4))) + ")");
                row2.getCell(j + header.length + 1).setCellStyle(footerKonten);
            }
        }
        // Total Kuadran untuk Cabang
        String[] kuadran1 = new String[]{"A", "B", "C", "D", "E"};
        String[] kuadran2 = new String[]{"VLOOKUP($C$4,Database!$X:$AP,19,0)", "VLOOKUP($C$4,Database!$X:$AQ,20,0)", "VLOOKUP($C$4,Database!$X:$AR,21,0)", "VLOOKUP($C$4,Database!$X:$AS,22,0)", "VLOOKUP($C$4,Database!$X:$AT,23,0)"};
        for (int i = 0; i < kuadran1.length; i++) {
            Row row = sheet4.getRow(i + 3);
            row.getCell(8).setCellValue(kuadran1[i]);
            row.getCell(8).setCellStyle(styleBelakang);
            row.getCell(9).setCellFormula(kuadran2[i]);
            row.getCell(9).setCellStyle(styleBelakang);
        }

        //
        // Membuat Piechart
        //
        XSSFDrawing drawing = (XSSFDrawing) sheet4.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 7, 3, 12, 13);

        XSSFChart chart = drawing.createChart(anchor);
        chart.setTitleText("Kuadran");
        chart.setTitleOverlay(false);

        XDDFChartLegend legend = chart.getOrAddLegend();
        legend.setPosition(LegendPosition.TOP_RIGHT);

        XDDFDataSource<String> kuadran = XDDFDataSourcesFactory.fromStringCellRange((XSSFSheet) sheet4, new CellRangeAddress(3, 7, 8, 8));

        XDDFNumericalDataSource<Double> values = XDDFDataSourcesFactory.fromNumericCellRange((XSSFSheet) sheet4, new CellRangeAddress(3, 7, 9, 9));

        XDDFChartData data = chart.createData(ChartTypes.PIE, null, null);// chart.createData(ChartTypes.PIE,
        // null, null);
        data.setVaryColors(true);
        data.addSeries(kuadran, values);
        chart.plot(data);

        // Set Column
        for (int i = 0; i < 17; i++) {
            sheet4.autoSizeColumn(i);
        }

        // Merge Cell
        sheet4.addMergedRegion(new CellRangeAddress(9, 9, 0, 1));
    }

    private void SRBB() {
        //
        // Mengambil Agen Terbanyak untuk SRBB
        //
        int jumlahAgenTerbanyak = 0;
        for (int i = 0; i < jTable8.getRowCount(); i++) {
            if (jumlahAgenTerbanyak < (int) jTable8.getValueAt(i, 1)) {
                jumlahAgenTerbanyak = (int) jTable8.getValueAt(i, 1);
            }
        }

        //
        // Membuat Row
        //
        for (int i = 0; i < 17 + jTable8.getRowCount(); i++) {
            Row row = sheet5.createRow(i);
            for (int j = 0; j < 12; j++) {
                Cell cell = row.createCell(j);
                cell.setBlank();
            }
        }

        //Ambil Data Sales
        for (int i = 0; i < jTable8.getRowCount(); i++) {
            Row row = sheet5.getRow(i);
            row.getCell(10).setCellValue((String) jTable8.getValueAt(i, 0));
            row.getCell(10).setCellStyle(styleBelakang);
        }

        //
        // Membuat Drop Down Sales
        //
        sheet5.getRow(1).getCell(0).setCellValue("Pilih Sales :");
        sheet5.getRow(1).getCell(1).setCellValue((String) jTable8.getValueAt(0, 0));
        sheet5.getRow(1).getCell(0).setCellStyle(dropdownStyle);
        sheet5.getRow(1).getCell(1).setCellStyle(dropdownStyle);
        DataValidationHelper validationHelper = sheet5.getDataValidationHelper();
        DataValidationConstraint constraint = validationHelper.createFormulaListConstraint("$K$1:$K$" + (jTable8.getRowCount()));
        CellRangeAddressList addressList = new CellRangeAddressList(1, 1, 1, 1);
        DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
        dataValidation.setSuppressDropDownArrow(true);
        sheet5.addValidationData(dataValidation);

        //
        // Membuat Data Kinerja Agen
        //
        String[] detail = new String[]{"Jumlah Agen", "Jumlah Saldo Agen", "Jumlah Sales Volume", "Jumlah Transaksi", "Jumlah Funding", "Jumlah Rekening Turunan", "Jumlah Referral Kredit"};
        String[] rumus = new String[]{"VLOOKUP($B$2,Database!$AW:$AX,2,0)", "VLOOKUP($B$2,Database!$AW:$AY,3,0)", "VLOOKUP($B$2,Database!$AW:$AZ,4,0)", "VLOOKUP($B$2,Database!$AW:$BA,5,0)", "VLOOKUP($B$2,Database!$AW:$BB,6,0)", "VLOOKUP($B$2,Database!$AW:$BC,7,0)", "VLOOKUP($B$2,Database!$AW:$BD,8,0)"};
        sheet5.getRow(3).getCell(0).setCellValue("Kinerja Agen BB");
        sheet5.getRow(3).getCell(0).setCellStyle(headerUtama);
        for (int i = 0; i < detail.length; i++) {
            Row row = sheet5.getRow(i + 4);
            Cell cell = row.getCell(0);
            cell.setCellValue(detail[i]);
            cell.setCellStyle(isiUtama);
        }
        // Membuat Data Rumus
        for (int i = 0; i < rumus.length; i++) {
            Row row = sheet5.getRow(i + 4);
            Cell cell = row.getCell(1);
            cell.setCellFormula(rumus[i]);
            cell.setCellStyle(isiUtama);
        }

        //
        //Membuat Data Kuadran
        //
        String[] detail2 = new String[]{"Kuadran", "A", "B", "C", "%ABC", "%AC", "D", "E", "Total"};
        String[] rumus21 = new String[]{tanggalDatablast[0], "VLOOKUP($B$2,Database!$AW:$BE,9,0)", "VLOOKUP($B$2,Database!$AW:$BF,10,0)", "VLOOKUP($B$2,Database!$AW:$BG,11,0)", "IFERROR(SUM(E5:E7)/E12,0)", "IFERROR((E5+E7)/E12,0)", "VLOOKUP($B$2,Database!$AW:$BH,12,0)", "VLOOKUP($B$2,Database!$AW:$BI,13,0)", "SUM(E10:E11,E5:E7)"};
        String[] rumus22 = new String[]{tanggalDatablast[1], "VLOOKUP($B$2,Database!$AW:$BJ,14,0)", "VLOOKUP($B$2,Database!$AW:$BK,15,0)", "VLOOKUP($B$2,Database!$AW:$BL,16,0)", "IFERROR(SUM(F5:F7)/F12,0)", "IFERROR((F5+F7)/F12,0)",  "VLOOKUP($B$2,Database!$AW:$BM,17,0)", "VLOOKUP($B$2,Database!$AW:$BN,18,0)", "SUM(F10:F11,F5:F7)"};
        for (int i = 0; i < detail2.length; i++) {
            Row row = sheet5.getRow(i + 3);
            row.getCell(3).setCellValue(detail2[i]);
        }
        //Style
        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet5.getRow(i + 3);
            row.getCell(3).setCellValue(detail2[i]);
            row.getCell(3).setCellStyle(isiUtamaKuadran);
        }

        sheet5.getRow(3).getCell(4).setCellValue(rumus21[0]);
        sheet5.getRow(3).getCell(5).setCellValue(rumus22[0]);

        //StyleHeader
        sheet5.getRow(3).getCell(3).setCellStyle(headerUtama);
        sheet5.getRow(3).getCell(4).setCellStyle(headerUtama);
        sheet5.getRow(3).getCell(5).setCellStyle(headerUtama);

        for (int i = 1; i < detail2.length; i++) {
            Row row = sheet5.getRow(i + 3);
            row.getCell(4).setCellFormula(rumus21[i]);
            row.getCell(5).setCellFormula(rumus22[i]);
        }

        for (int i = 1; i < detail2.length - 1; i++) {
            Row row = sheet5.getRow(i + 3);
            row.getCell(4).setCellStyle(isiUtamaKuadran);
            row.getCell(5).setCellStyle(isiUtamaKuadran);
        }

        //StylePersen
        sheet5.getRow(7).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet5.getRow(7).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet5.getRow(7).getCell(5).setCellStyle(isiUtamaKuadranPersen);
        sheet5.getRow(8).getCell(3).setCellStyle(isiUtamaKuadranPersen);
        sheet5.getRow(8).getCell(4).setCellStyle(isiUtamaKuadranPersen);
        sheet5.getRow(8).getCell(5).setCellStyle(isiUtamaKuadranPersen);

        //StyleFooter
        sheet5.getRow(detail2.length + 2).getCell(3).setCellStyle(footerUtama);
        sheet5.getRow(detail2.length + 2).getCell(4).setCellStyle(footerUtama);
        sheet5.getRow(detail2.length + 2).getCell(5).setCellStyle(footerUtama);

        //
        // Membuat Data Agen per srbb
        //
        sheet5.getRow(13).getCell(0).setCellValue("Agen");
        sheet5.getRow(13).getCell(0).setCellStyle(boldTitle);
        //Membuat Header
        String[] header = new String[]{"Agen", "Transaksi", "Sales Volume", "Saldo Agen", "Funding", "Rekening Turunan", "Referral Kredit", "Kuadran"};
        for (int i = 0; i < header.length; i++) {
            Row row = sheet5.getRow(14);
            row.getCell(i).setCellValue(header[i]);
            row.getCell(i).setCellStyle(headerKonten);
        }

        //Membuat Isi
        String[] rumus3 = new String[]{"1", "19", "18", "14", "17", "20", "21", "22"};
        for (int i = 0; i < jumlahAgenTerbanyak; i++) {
            Row row = sheet5.getRow(i + 15);
            for (int j = 0; j < header.length; j++) {
                Cell cell = row.getCell(j);
                cell.setCellFormula("IFERROR(INDEX(Database!$BS:$CO,MATCH(I" + (i + 16) + ",Database!$CO:$CO,0)," + rumus3[j] + "),\"\")");
                cell.setCellStyle(isiKonten);
                row.getCell(header.length).setCellValue(i + 1);
                row.getCell(header.length).setCellStyle(styleBelakang);
            }
        }

        //Membuat Total
        String[] rumus4 = new String[]{"B", "C", "D", "E", "F", "G", "H", "I"};
        sheet5.getRow(15 + jumlahAgenTerbanyak).getCell(0).setCellValue("Total");
        sheet5.getRow(15 + jumlahAgenTerbanyak).getCell(0).setCellStyle(footerKonten);
        for (int i = 1; i < header.length; i++) {
            Row row = sheet5.getRow(15 + jumlahAgenTerbanyak);
            Cell cell = row.getCell(i);
            cell.setCellFormula("SUM(" + rumus4[i - 1] + "16:" + rumus4[i - 1] + String.valueOf(15 + jumlahAgenTerbanyak) + ")");
            cell.setCellStyle(footerKonten);
        }

        // Total Kuadran untuk SRBB
        String[] kuadran1 = new String[]{"A", "B", "C", "D", "E"};
        String[] kuadran2 = new String[]{"VLOOKUP($B$2,Database!$AW:$BJ,14,0)", "VLOOKUP($B$2,Database!$AW:$BK,15,0)", "VLOOKUP($B$2,Database!$AW:$BL,16,0)", "VLOOKUP($B$2,Database!$AW:$BM,17,0)", "VLOOKUP($B$2,Database!$AW:$BN,18,0)"};
        for (int i = 0; i < kuadran1.length; i++) {
            Row row = sheet5.getRow(i + 3);
            row.getCell(8).setCellValue(kuadran1[i]);
            row.getCell(8).setCellStyle(styleBelakang);
            row.getCell(9).setCellFormula(kuadran2[i]);
            row.getCell(9).setCellStyle(styleBelakang);
        }

        //
        // Membuat Piechart
        //
        XSSFDrawing drawing = (XSSFDrawing) sheet5.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 7, 3, 12, 13);

        XSSFChart chart = drawing.createChart(anchor);
        chart.setTitleText("Kuadran");
        chart.setTitleOverlay(false);

        XDDFChartLegend legend = chart.getOrAddLegend();
        legend.setPosition(LegendPosition.TOP_RIGHT);

        XDDFDataSource<String> kuadran = XDDFDataSourcesFactory.fromStringCellRange((XSSFSheet) sheet5, new CellRangeAddress(3, 7, 8, 8));

        XDDFNumericalDataSource<Double> values = XDDFDataSourcesFactory.fromNumericCellRange((XSSFSheet) sheet5, new CellRangeAddress(3, 7, 9, 9));

        XDDFChartData data = chart.createData(ChartTypes.PIE, null, null);// chart.createData(ChartTypes.PIE,
        XDDFChartData.Series series = data.addSeries(kuadran, values);
        // null, null);
        data.setVaryColors(true);
        chart.plot(data);

        // Set Column
        for (int i = 0; i < 8; i++) {
            sheet5.autoSizeColumn(i);
        }

        // Merge Cell
        sheet5.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JLabel tanggalData;
    private javax.swing.JLabel totalAgen;
    // End of variables declaration//GEN-END:variables
}
